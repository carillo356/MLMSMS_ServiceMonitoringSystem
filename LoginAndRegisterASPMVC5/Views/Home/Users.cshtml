@model LoginAndRegisterASPMVC5.Models.User
@{
    ViewBag.Title = "Users";
    Layout = "~/Views/Shared/_LayoutPage1.cshtml";
}

<body class="bgcolor">
    <!-- Nav Bar with Responsive -->
    <header>
        <div class="container-fluid">
            <div class="navb-name">
                MLM Service Monitoring System
            </div>

            <div class="navb-items d-none d-xl-flex">
                <div class="menu-item">
                    <a href="@Url.Action("Index","Home")" class="navbar">Home</a>
                </div>

                <div class="menu-item">
                    <a href="@Url.Action("Users","Home")" class="navbar active">Users</a>
                </div>

                <div class="item-button">
                    <a href="@Url.Action("Logout","Home")" type="button">Logout</a>
                </div>
            </div>

            <!-- Button trigger modal (Responsive) -->
            <div class="mobile-toggler d-lg-none">
                <a href="#" data-bs-toggle="modal" data-bs-target="#navbModal">
                    <i class="bi bi-list"></i>
                </a>
            </div>

            <!-- Modal (Responsive) -->
            <div class="modal fade" style="width: 500px;" id="navbModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="title">MLM Service Monitoring System</div>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"><i class="bi bi-x-lg"></i></button>
                        </div>

                        <div class="modal-body">
                            <div class="modal-line">
                                <a href="@Url.Action("Index","Home")" class="btn btn-primary"><i class="bi bi-house"></i> Home</a>
                            </div>

                            <div class="modal-line">
                                <a href="@Url.Action("Users","Home")" class="btn btn-primary"><i class="bi bi-bell"></i>Users</a>
                            </div>

                            <a href="@Url.Action("Logout","Home")" class="navb-button" type="button">Logout</a>
                        </div>

                        <div class="mobile-modal-footer">
                            <a target="_blank" href="#"><i class="bi bi-instagram"></i></a>
                            <a target="_blank" href="#"><i class="bi bi-linkedin"></i></a>
                            <a target="_blank" href="#"><i class="bi bi-youtube"></i></a>
                            <a target="_blank" href="#"><i class="bi bi-facebook"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Users Table -->
    <div class="container-xl">
        <div class="table-responsive">
            <div class="table-wrapper">
                <div class="table-title">
                    <div class="row">
                        <div class="col-sm-6">
                            <h2><b>List of Users</b></h2>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <table class="table table-hover" id="usersTable">
            <thead>
                <tr>
                    <th scope="col" style="width: 15%;">FIRST NAME</th>
                    <th scope="col" style="width: 15%;">LAST NAME</th>
                    <th scope="col" style="width: 10%;">EMAIL ADDRESS</th>
                    <th scope="col" style="width: 10%;">USER ROLE</th>
                    <th scope="col" style="width: 15%;">ACTION</th>
                </tr>
            </thead>
            <tbody>
                <!-- table content goes here -->
            </tbody>
        </table>
        <div class="container">
            <div class="row">
                <div class="col-md-3">
                    <div class="nonAdminRow">
                        <div class="btn_nonAdminRow">
                            <span class="sBtn_nonAdminRow">Select row</span>
                            <i class="bi bi-arrow-down-short"></i>
                        </div>

                        <ul class="options_nonAdminRow">
                            <li class="option_nonAdmin">
                                <span class="option_nonAdmin-text">5 rows</span>
                            </li>
                            <li class="option_nonAdmin">
                                <span class="option_nonAdmin-text">10 rows</span>
                            </li>
                            <li class="option_nonAdmin">
                                <span class="option_nonAdmin-text">15 rows</span>
                            </li>
                            <li class="option_nonAdmin">
                                <span class="option_nonAdmin-text">20 rows</span>
                            </li>
                            <li class="option_nonAdmin">
                                <span class="option_nonAdmin-text">All rows</span>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="hint-text">Page <b>1</b> out of <b>5</b></div>
                </div>
                <div class="col-md-5">
                    <div class="pagination">
                        <ul> <!--pages or li are comes from javascript --> </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Design for any Action -->
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
        <div id="liveToast" class="toast hide" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <i class="bi bi-info-circle"></i>
                <strong class="me-auto">  System Message</strong>
            </div>
            <div class="toast-body">
            </div>
        </div>
    </div>

    <!-- Selecting Rows Dropdown for Users (Non-Admin) Table -->
    <script>
        const optionMenu2 = document.querySelector(".nonAdminRow"),
            select_btn2 = optionMenu2.querySelector(".btn_nonAdminRow"),
            options2 = optionMenu2.querySelectorAll(".option_nonAdmin"),
            sBtn_text2 = optionMenu2.querySelector(".sBtn_nonAdminRow");

        select_btn2.addEventListener("click", () => optionMenu2.classList.toggle("active"));

        options2.forEach(option => {
            option.addEventListener("click", () => {
                let selectedOption = option.querySelector(".option_nonAdmin-text").innerText;
                sBtn_text2.innerText = selectedOption;

                optionMenu2.classList.remove("active");
            });
        });
    </script>

    <!-- Show Modal -->
    <script>
        var myModal = new bootstrap.Modal(document.getElementById('signup-modal'));
        myModal.show();
    </script>

    <!-- Tooltip, Refresh Table, Show Password, etc -->
    <script>
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })

        $(document).ready(function () {
            RealTimeUsersTable();
        });

        const togglePassword = document.getElementById("togglePassword");
        const password = document.getElementById("password");

        togglePassword.addEventListener("change", function () {
            if (togglePassword.checked) {
                password.type = "text";
            } else {
                password.type = "password";
            }
        });
    </script>

    <!-- Pagination Design for Non-Admin Users Table -->
    <script>
        // selecting required element
        const element = document.querySelector(".pagination ul");
        let totalPages = 20;
        let page = 10;
        //calling function with passing parameters and adding inside element which is ul tag
        element.innerHTML = createPagination(totalPages, page);
        function createPagination(totalPages, page) {
            let liTag = '';
            let active;
            let beforePage = page - 1;
            let afterPage = page + 1;
            if (page > 1) { //show the next button if the page value is greater than 1
                liTag += `<li class="btn prev" onclick="createPagination(totalPages, ${page - 1})"><span><i class="fas fa-angle-left"></i> Prev</span></li>`;
            }
            if (page > 2) { //if page value is less than 2 then add 1 after the previous button
                liTag += `<li class="first numb" onclick="createPagination(totalPages, 1)"><span>1</span></li>`;
                if (page > 3) { //if page value is greater than 3 then add this (...) after the first li or page
                    liTag += `<li class="dots"><span>...</span></li>`;
                }
            }
            // how many pages or li show before the current li
            if (page == totalPages) {
                beforePage = beforePage - 2;
            } else if (page == totalPages - 1) {
                beforePage = beforePage - 1;
            }
            // how many pages or li show after the current li
            if (page == 1) {
                afterPage = afterPage + 2;
            } else if (page == 2) {
                afterPage = afterPage + 1;
            }
            for (var plength = beforePage; plength <= afterPage; plength++) {
                if (plength > totalPages) { //if plength is greater than totalPage length then continue
                    continue;
                }
                if (plength == 0) { //if plength is 0 than add +1 in plength value
                    plength = plength + 1;
                }
                if (page == plength) { //if page is equal to plength than assign active string in the active variable
                    active = "active";
                } else { //else leave empty to the active variable
                    active = "";
                }
                liTag += `<li class="numb ${active}" onclick="createPagination(totalPages, ${plength})"><span>${plength}</span></li>`;
            }
            if (page < totalPages - 1) { //if page value is less than totalPage value by -1 then show the last li or page
                if (page < totalPages - 2) { //if page value is less than totalPage value by -2 then add this (...) before the last li or page
                    liTag += `<li class="dots"><span>...</span></li>`;
                }
                liTag += `<li class="last numb" onclick="createPagination(totalPages, ${totalPages})"><span>${totalPages}</span></li>`;
            }
            if (page < totalPages) { //show the next button if the page value is less than totalPage(20)
                liTag += `<li class="btn next" onclick="createPagination(totalPages, ${page + 1})"><span>Next <i class="fas fa-angle-right"></i></span></li>`;
            }
            element.innerHTML = liTag; //add li tag inside ul tag
            return liTag; //reurn the li tag
        }
    </script>

    <!-- Pagination for Users Table -->
    <script>
        // define the number of items per page
        const ITEMS_PER_PAGE = 5;

        // get the table body element
        const tableBody = document.querySelector('#usersTable tbody');

        // get the pagination links
        const paginationLinks = document.querySelectorAll('.pagination ul');

        // define a function to show the items for the selected page
        function showPage(pageNumber) {
            // calculate the start and end indexes of the items to show
            const startIndex = (pageNumber - 1) * ITEMS_PER_PAGE;
            const endIndex = startIndex + ITEMS_PER_PAGE;

            // hide all rows in the table
            const rows = tableBody.querySelectorAll('tr');
            rows.forEach(row => {
                row.style.display = 'none';
            });

            // show the rows for the current page
            for (let i = startIndex; i < endIndex && i < rows.length; i++) {
                rows[i].style.display = '';
            }
        }

        function RealTimeUsersTable() {
            /*Refresh the table with the updated data*/
            $.ajax({
                url: "/Home/RealTimeUsersTable",
                type: "GET",
                dataType: 'json',
                success: function (result) {
                    $("#usersTable tbody").empty();
                    // Loop through the data and append each row to the table
                    result.forEach(function (Data) {
                        const Role = (Data.IsAdmin === true) ? '<span>Admin</span>' : '<span>Non-Admin</span>';

                        var row = "<tr data-toggle='modal' data-target='#service-modal'>";
                        row += "<td>" + Data.FirstName + "</td>";
                        row += "<td>" + Data.LastName + "</td>";
                        row += "<td>" + Data.Email + "</td>";
                        row += "<td>" + Role + "</td>";
                        row += "<td>";
                        if (Data.Email_Notification == true) {
                            row += "<button onclick='setNotification(\"" + Data.idUser + "\", \"" + Data.FirstName + "\", \"" + Data.LastName + "\", \"off\")' class='user-button btn-green' id='btnSet' data-bs-toggle='tooltip' data-bs-placement='top' title='Set Email On'>";
                            row += "<i class='bi bi-envelope-check-fill'></i>";
                            row += "</button>";
                        } else {
                            row += "<button onclick='setNotification(\"" + Data.idUser + "\", \"" + Data.FirstName + "\", \"" + Data.LastName + "\", \"on\")' class='user-button btn-red' id='btnSet' data-bs-toggle='tooltip' data-bs-placement='top' title='Set Email Off'>";
                            row += "<i class='bi bi-envelope-x-fill'></i>";
                            row += "</button>";
                        }
                        row += "</td></tr>";
                        $("#usersTable tbody").append(row);
                    });
                },
                error: function () {
                    alert("Failed to refresh users.");
                }
            });
        }

        // show the first page by default
        $(document).ready(function () {
            RealTimeUsersTable().then(function () {
                showPage(pageNumber);
            });
        });

        function setNotification(idUser, FirstName, LastName, command) {
            $.ajax({
                type: 'POST',
                url: '/Home/UpdateEmailNotification',
                data: { idUser: idUser },
                success: function () {
                    $(document).ready(function () {
                        RealTimeUsersTable().then(function () {
                            showPage(pageNumber);
                        });
                    });

                    if (command === "on") {
                        commandText = "RECEIVE";
                    } else if (command === "off") {
                        commandText = "NOT RECEIVE";
                    }

                    var toast = new bootstrap.Toast(document.getElementById('liveToast'));
                    var toastMessage = "User " + "' " + FirstName + " " + LastName + " '" + " WILL " + commandText + " email notifications.";
                    document.querySelector('.toast-body').innerHTML = toastMessage;
                    toast.show();

                    setTimeout(function () {
                        toast.dispose();
                    }, 4000);
                },
                error: function (xhr, status, error) {
                    alert(error);
                }
            });
        }

        var pageNumber = 1;
        // handle the click event of the pagination links
        paginationLinks.forEach(link => {
            link.addEventListener('click', event => {
                event.preventDefault();
                // get the selected page number from the link's text
                pageNumber = parseInt(link.innerText);

                // show the items for the selected page
                showPage(pageNumber);

                // mark the selected page as active
                paginationLinks.forEach(link => {
                    link.parentElement.classList.remove('active');
                });
                link.parentElement.classList.add('active');
            });
        });
    </script>

</body>


