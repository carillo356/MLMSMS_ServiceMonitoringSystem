@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutPage1.cshtml";
}

<body class="bgcolor">
    <!-- Nav Bar with Responsive -->
    <header>
        <div class="container-fluid">
            <div class="navb-name">
                MLM Service Monitoring System
            </div>

            <div class="navb-items d-none d-xl-flex">
                <div class="menu-item">
                    <a href="@Url.Action("Index","Home")" class="navbar active">Home</a>
                </div>

                <div class="menu-item">
                    <a href="@Url.Action("Users","Home")" class="navbar">Users</a>
                </div>

                <div class="item-button">
                    <a href="@Url.Action("Logout","Home")" type="button">Logout</a>
                </div>
            </div>

            <!-- Button trigger modal (Responsive) -->
            <div class="mobile-toggler d-lg-none">
                <a href="#" data-bs-toggle="modal" data-bs-target="#navbModal">
                    <i class="bi bi-list"></i>
                </a>
            </div>

            <!-- Modal (Responsive) -->
            <div class="modal fade" style="width: 500px;" id="navbModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="title">MLM Service Monitoring System</div>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"><i class="bi bi-x-lg"></i></button>
                        </div>

                        <div class="modal-body">
                            <div class="modal-line">
                                <a href="@Url.Action("Index","Home")" class="btn btn-primary"><i class="bi bi-house"></i>Home</a>
                            </div>

                            <div class="modal-line">
                                <a href="@Url.Action("Users","Home")" class="btn btn-primary"><i class="bi bi-bell"></i>Users</a>
                            </div>

                            <a href="@Url.Action("Logout","Home")" class="navb-button" type="button">Logout</a>
                        </div>

                        <div class="mobile-modal-footer">
                            <a target="_blank" href="#"><i class="bi bi-instagram"></i></a>
                            <a target="_blank" href="#"><i class="bi bi-linkedin"></i></a>
                            <a target="_blank" href="#"><i class="bi bi-youtube"></i></a>
                            <a target="_blank" href="#"><i class="bi bi-facebook"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Dropdown menu in selecting no. of rows for Log History Table -->
    <div id="logHistory-modal" class="modal">
        <div class="modal-servicelogs">
            <span class="close">&times;</span>
            <div class="service_title">Log History</div>
            <div class="service_name mb-2 fst-italic"></div>

            <table class="table" id="popupTable">
                <thead>
                    <tr class="border-4 border-dark">
                        <th scope="col" style="width: 25%;">LAST START</th>
                        <th scope="col" style="width: 20%;">LAST LOG</th>
                        <th scope="col">STATUS</th>
                        <th scope="col" style="width: 25%;">HOST NAME</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- table content goes here -->
                </tbody>
            </table>
            <div class="container">
                <div class="row">
                    <div class="col-md-4">
                        <div class="select-menu">
                            <div class="select-btn1">
                                <span class="sBtn-text">Select row</span>
                                <i class="bi bi-arrow-down-short"></i>
                            </div>

                            <ul class="options">
                                <li class="option">
                                    <span class="option-text">10 rows</span>
                                </li>
                                <li class="option">
                                    <span class="option-text">20 rows</span>
                                </li>
                                <li class="option">
                                    <span class="option-text">30 rows</span>
                                </li>
                                <li class="option">
                                    <span class="option-text">40 rows</span>
                                </li>
                                <li class="option">
                                    <span class="option-text">All rows</span>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="hint-text">Page <b>1</b> out of <b>5</b></div>
                    </div>
                    <div class="col-md-4">
                        <ul class="pagination">
                            <li class="page-item"><a href="#" class="page-link">Previous</a></li>
                            <li class="page-item active"><a href="#" class="page-link">1</a></li>
                            <li class="page-item"><a href="#" class="page-link">2</a></li>
                            <li class="page-item"><a href="#" class="page-link">3</a></li>
                            <li class="page-item"><a href="#" class="page-link">4</a></li>
                            <li class="page-item"><a href="#" class="page-link">5</a></li>
                            <li class="page-item"><a href="#" class="page-link">Next</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Adding Service with Checkbox Modal -->
    <div class="modal fade" id="displayService-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-center" id="exampleModalLabel">Add Services</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-left">
                        <form onsubmit="event.preventDefault();" class="d-flex align-items-center mb-0">
                            <div class="form-group m-3" style="width: 100%;">
                                <input type="text" name="ServiceName" class="form-control search-box" autocomplete="off" placeholder="Search" />
                            </div>
                        </form>
                    </div>
                    <div class="list-group">
                        <div id="serviceCheckboxes"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary custom-button" id="btnAddService" onclick="submitForm()" data-bs-dismiss="modal">Add</button>
                    <button type="button" class="btn btn-primary custom-button" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Service Table Modal -->
    <div class="container-xl">
        <div class="table-responsive">
            <div class="table-wrapper">
                <div class="table-title">
                    <div class="row">
                        <div class="col-sm-6">
                            <h2><b>List of Services</b></h2>
                        </div>
                        <div class="col-sm-6 button-container">
                            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#displayService-modal"><i class="bi bi-plus-circle"></i><span>Add Services</span></button>
                            <button type="button" class="btn btn-success"><i class="bi bi-arrow-clockwise" onclick="RealTimeTable()"></i><span>Refresh List</span></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <table class="table table-hover" id="serviceTable">
            <thead>
                <tr>
                    <th scope="col" style="width: 15%;">SERVICE NAME</th>
                    <th scope="col" style="width: 15%;">LAST START</th>
                    <th scope="col" style="width: 12%;">LAST LOG</th>
                    <th scope="col" style="width: 12%;">SERVICE STATUS</th>
                    <th scope="col" style="width: 15%;">ACTION BY</th>
                    <th scope="col" style="width: 15%;">ACTION</th>
                </tr>
            </thead>
            <tbody>
                <!-- table content goes here -->
            </tbody>
        </table>
        <div class="container">
            <div class="row">
                <div class="col-md-4">
                    <div class="serviceRow">
                        <div class="btnRow">
                            <span class="sBtnRow">Select row</span>
                            <i class="bi bi-arrow-down-short"></i>
                        </div>

                        <ul class="optionsRow">
                            <li class="optionRow">
                                <span class="optionRow-text">5 rows</span>
                            </li>
                            <li class="optionRow">
                                <span class="optionRow-text">10 rows</span>
                            </li>
                            <li class="optionRow">
                                <span class="optionRow-text">15 rows</span>
                            </li>
                            <li class="optionRow">
                                <span class="optionRow-text">20 rows</span>
                            </li>
                            <li class="optionRow">
                                <span class="optionRow-text">All rows</span>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="hint-text">Page <b>1</b> out of <b>5</b></div>
                </div>
                <div class="col-md-4">
                    <ul class="pagination" id="pagination-service">
                        <li class="page-item"><a href="#" class="page-link">Previous</a></li>
                        <li class="page-item active"><a href="#" class="page-link">1</a></li>
                        <li class="page-item"><a href="#" class="page-link">2</a></li>
                        <li class="page-item"><a href="#" class="page-link">3</a></li>
                        <li class="page-item"><a href="#" class="page-link">4</a></li>
                        <li class="page-item"><a href="#" class="page-link">5</a></li>
                        <li class="page-item"><a href="#" class="page-link">Next</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Design for any ACTION-->
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
        <div id="liveToast" class="toast hide" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <i class="bi bi-info-circle"></i>
                <strong class="me-auto">  System Message</strong>
            </div>
            <div class="toast-body">
            </div>
        </div>
    </div>

    <!-- Submit Form for Add Service -->
    <script>
        function submitForm() {
            var serviceName = $('input[name="ServiceName"]').val();
            AddService(serviceName);
        }
    </script>

    <!-- Checkbox Function -->
    <script>
        $(document).ready(function () {
            RealTimeCheckbox();
        });
        var _servicesInController;
        function RealTimeCheckbox() {
            GetServicesInController()
                .then(function () {
                    Checkbox(_servicesInController);
                })
                .catch(function (error) {
                    alert(error);
                });
        }

        function GetServicesInController() {
            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: "/Home/GetServicesInController",
                    type: 'GET',
                    dataType: 'json',
                    success: function (result) {
                        _servicesInController = result;
                        resolve();
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        reject('Error Geting service names');
                    }
                });
            });
        }

        function Checkbox(_servicesInController) {
            if (_servicesInController.length > 0) {
                var checkboxes = '';
                $.each(_servicesInController, function (i, item) {
                    var checkbox = `<li class="item"><div class="form-check">
                                            <input class="form-check-input" type="checkbox" value="${item}" id="service-${i}">
                                            <label class="form-check-label" for="service-${i}">${item}</label>
                                        </div></li>`;
                    checkboxes += checkbox;

                });
                $('#serviceCheckboxes').html(/*checkedItems.join('') +*/ checkboxes);
            }
        }

        $('#searchService').on('input', function () {
            var searchText = $(this).val().toLowerCase();
            $('.form-check-label').each(function () {
                var label = $(this).text().toLowerCase();
                $(this).closest('.item').toggle(label.includes(searchText));
            });
        });

        $('input[name="ServiceName"]').on('input', function () {
            var filter = $(this).val().toUpperCase();
            $('#serviceCheckboxes li').each(function () {

                var label = $(this).find('label').text().toUpperCase();
                $(this).toggle(label.includes(filter));
            });
        });

        //$('.btn-primary').on('click', function () {
        //    $('input[type="checkbox"]:checked').each(function () {
        //        AddService($(this).val());
        //    });
        //    $('#displayService-modal').modal('hide');
        //});

        $('.btn-primary').on('click', function () {
            var checkedCount = $('input[type="checkbox"]:checked').length;
            var servicesAdded = [];

            $('input[type="checkbox"]:checked').each(function () {
                var serviceName = $(this).val();
                AddService(serviceName);
                servicesAdded.push(serviceName);
            });

            if (servicesAdded.length > 0) {
                var toast = new bootstrap.Toast(document.getElementById('liveToast'));
                var toastMessage = "You have added " + checkedCount + " service(s)";
                document.querySelector('.toast-body').innerHTML = toastMessage;
                toast.show();

                setTimeout(function () {
                    toast.dispose();
                }, 4000);
            }

            $('#displayService-modal').modal('hide');
        });

    </script>

    <!-- Service Table and Log History -->
    <script>
        $(document).ready(function () {
            RealTimeTable();
        });

        var activeServiceName;

        //Event Listener for Selecting no. of Rows
        $(document).ready(function () {
            // Set up the event listener for options
            $('.options li').click(function () {
                var optionText = $(this).find('.option-text').text();
                switch (optionText) {
                    case "All rows":
                        limit = -1;
                        break;
                    default:
                        limit = parseInt(optionText);
                        break;
                }
                logHistory(activeServiceName, limit);
            });

            // Set up the close button to hide the dialog when clicked
            $('.close').click(function () {
                $('#logHistory-modal').css('display', 'none');
            });
        });

        function handleRowClick(serviceName, limit) {
            logHistory(serviceName, limit);
        }

        function handleServiceAction(serviceName, action) {
            ServiceActions(serviceName, action);
        }

        //Manage Services
        function ServiceActions(serviceName, command) {
            /*Show the confirmation box here*/
            var modal = document.getElementById("alert-modal");
            var modalTitle = document.getElementById("modal-title");
            var modalMessage = document.getElementById("modal-message");
            var btnYes = document.getElementById("btnYes");
            var btnNo = document.getElementById("btnNo");

            modal.style.display = "block";
            modalTitle.innerHTML = "<i class='bi bi-exclamation-triangle-fill text-warning'></i> System Message";
            modalMessage.innerHTML = "Are you sure you want to " + command.toUpperCase() + " '" + serviceName + "'?";
            btnYes.onclick = function () {
                /* Handle the command here*/
                $.ajax({
                    url: '/Home/ServiceAction',
                    type: 'POST',
                    data: { serviceName: serviceName, command: command },
                    success: function () {
                        $("#serviceTable tbody").empty();
                        RealTimeTable();

                        var commandText = command.toUpperCase();
                        if (command === "stop") {
                            commandText = "STOPPED";
                        } else if (command === "start") {
                            commandText = "STARTED";
                        } else if (command === "restart") {
                            commandText = "RESTARTED";
                        }

                        var toast = new bootstrap.Toast(document.getElementById('liveToast'));
                        var toastMessage = "You " + commandText + " the service " + " ' " + serviceName + " ' " + ".";
                        document.querySelector('.toast-body').innerHTML = toastMessage;
                        toast.show();

                        setTimeout(function () {
                            toast.dispose();
                        }, 4000);
                    },
                    error: function () {
                        alert('Failed to ' + command + ' ' + serviceName);
                    }
                });
                modal.style.display = "none";
            }
            btnNo.onclick = function () {
                modal.style.display = "none";
            }
        }

    </script>

    <!-- Pagination for Log History-->
    <script>

        // define the number of items per page
        var ITEMS_PAR_PAGE_LOGS;

        // get the table body element
        const logstableBody = document.querySelector('#popupTable tbody');

        // get the pagination links
        const logspaginationLinks = document.querySelectorAll('#pagination-logs .page-link');

        // define a function to show the items for the selected page
        function logsshowPage(logs_pageNumber) {
            // calculate the start and end indexes of the items to show
            const logsstartIndex = (logs_pageNumber - 1) * ITEMS_PAR_PAGE_LOGS;
            const logsendIndex = logsstartIndex + ITEMS_PAR_PAGE_LOGS;

            // hide all rows in the table
            const logs_rows = logstableBody.querySelectorAll('tr');
            logs_rows.forEach(logs_row => {
                logs_row.style.display = 'none';
            });

            // show the rows for the current page
            for (let i = logsstartIndex; i < logsendIndex && i < logs_rows.length; i++) {
                logs_rows[i].style.display = '';
            }
        }

        var logs_pageNumber = 1;
        // handle the click event of the pagination links
        logspaginationLinks.forEach(link => {
            link.addEventListener('click', event => {
                event.preventDefault();
                // get the selected page number from the link's text
                logs_pageNumber = parseInt(link.innerText);

                // show the items for the selected page
                logsshowPage(logs_pageNumber);

                // mark the selected page as active
                logspaginationLinks.forEach(link => {
                    link.parentElement.classList.remove('active');
                });
                link.parentElement.classList.add('active');
            });
        });

        // Log History Modal
        function logHistory(serviceName, limit) {
            //Viewlogs, Gets all the records of a service
            $.ajax({
                url: "/Home/GetServiceLogsTB",
                type: "POST",
                data: { serviceName: serviceName },
                success: function (data) {
                    // Get the table body element
                    var tbody = $('#popupTable tbody');
                    tbody.empty();

                    // Create a string containing all the rows
                    var rows = '';
                    data.forEach(function (service) {
                        // Add a CSS class to the td element based on the value of ServiceStatus
                        var statusColorClass = service.ServiceStatus === 'Running' ? 'text-success' : 'text-danger';

                        rows += '<tr>' +
                            '<td>' + service.LastStart + '</td>' +
                            '<td>' + service.LastEventLog + '</td>' +
                            '<td class="status">' +
                            '<span class="' + statusColorClass + '">' + service.ServiceStatus + '</span>' +
                            '</td>' +
                            '<td>' + service.HostName + '</td>' +
                            '</tr>';
                    });

                    // Append the rows to the table in a single operation
                    tbody.append(rows);
                    activeServiceName = serviceName;

                    $('#logHistory-modal .modal-servicelogs .service_name').text(serviceName);

                    // Show the popup dialog
                    ITEMS_PAR_PAGE_LOGS = limit;
                    logsshowPage(1);
                    $('#logHistory-modal').css('display', 'block');

                },
                error: function () {
                    alert("Failed to retrieve records for " + serviceName);
                }
            });
        }
    </script>

    <!-- Pagination for Service Table -->
    <script>
        // define the number of items per page
        const ITEMS_PER_PAGE = 5;

        // get the table body element
        const tableBody = document.querySelector('#serviceTable tbody');

        // get the pagination links
        const paginationLinks = document.querySelectorAll('#pagination-service .page-link');

        // define a function to show the items for the selected page
        function showPage(pageNumber) {
            // calculate the start and end indexes of the items to show
            const startIndex = (pageNumber - 1) * ITEMS_PER_PAGE;
            const endIndex = startIndex + ITEMS_PER_PAGE;

            // hide all rows in the table
            const rows = tableBody.querySelectorAll('tr');
            rows.forEach(row => {
                row.style.display = 'none';
            });

            // show the rows for the current page
            for (let i = startIndex; i < endIndex && i < rows.length; i++) {
                rows[i].style.display = '';
            }
        }

        // handle the click event of the pagination links
        paginationLinks.forEach(link => {
            link.addEventListener('click', event => {
                event.preventDefault();
                // get the selected page number from the link's text
                const pageNumber = parseInt(link.innerText);

                // show the items for the selected page
                showPage(pageNumber);

                // mark the selected page as active
                paginationLinks.forEach(link => {
                    link.parentElement.classList.remove('active');
                });
                link.parentElement.classList.add('active');
            });
        });

        function RealTimeTable() {
            $.ajax({
                url: "/Home/RealTimeTable",
                type: "GET",
                dataType: 'json',
                success: function (result) {
                    $("#serviceTable tbody").empty();
                    // Loop through the data and append each row to the table
                    result.forEach(function (Data) {
                        var limit = 999;
                        if (Data.ServiceStatus === "Running")
                            statusText = '<span style="color:green">Running</span>'
                        else if (Data.ServiceStatus === "Stopped")
                            statusText = '<span style="color:red">Stopped</span>'
                        else
                            statusText = "";

                        var row = "<tr data-toggle='modal' data-target='#service-modal'>";
                        row += "<td onclick='handleRowClick(\"" + Data.ServiceName + "\", \"" + limit + "\")'>" + Data.ServiceName + "</td>";
                        row += "<td onclick='handleRowClick(\"" + Data.ServiceName + "\", \"" + limit + "\")'>" + Data.LastStart + "</td>";
                        row += "<td onclick='handleRowClick(\"" + Data.ServiceName + "\", \"" + limit + "\")'>" + Data.LastEventLog + "</td>";
                        row += "<td onclick='handleRowClick(\"" + Data.ServiceName + "\", \"" + limit + "\")'>" + statusText + "</span></td>";
                        row += "<td onclick='handleRowClick(\"" + Data.ServiceName + "\", \"" + limit + "\")'>" + Data.HostName + "</td>";
                        row += "<td>";

                        if (Data.ServiceStatus === "Stopped") {
                            row += "<button class='action-button' style='margin-right: 5px;'; id='btnRun' onclick='handleServiceAction(\"" + Data.ServiceName + "\", \"start\")'>Run</button>";
                            row += "<button class='action-button' id='btnDelete' onclick='RemoveAddedService(\"" + Data.ServiceName + "\", \"delete\")'>Delete</button>";
                        } else if (Data.ServiceStatus === "Running") {
                            row += "<button class='action-button' style='display:none;' id='btnRun' onclick='handleServiceAction(\"" + Data.ServiceName + "\", \"start\")'>Run</button>";
                            row += "<button class='action-button' id='btnStop' onclick='handleServiceAction(\"" + Data.ServiceName + "\", \"stop\")'>Stop</button>";
                            row += "<button class='action-button ms-2' id='btnRestart' onclick='handleServiceAction(\"" + Data.ServiceName + "\", \"restart\")'>Restart</button>";
                        } else if (Data.ServicesStatus != "Running" && Data.ServicesStatus != "Stopped")
                            row += "<button class='action-button' id='btnReload' onclick='handleServiceAction(\"" + Data.ServiceName + "\", \"reload\")'>Reload</button>";
                        row += "</td></tr>";
                        $("#serviceTable tbody").append(row);
                    });
                },
                error: function () {
                    alert("Failed to refresh services.");
                }
            });
        }
    </script>

    <!--Add or Remove Service-->
    <script>
        function AddService(serviceName) {
            $.ajax({
                url: "/Home/AddService",
                type: "POST",
                data: { serviceName: serviceName },
                success: function () {

                    var $servicesTable = $('#servicesTable');
                    var $tableRows = $servicesTable.find('tbody tr');

                    // Add the new service(s) to the top of the table in the order they were selected
                    var $newRows = $('input[type="checkbox"]:checked').map(function () {
                        return `<tr><td>${$(this).val()}</td></tr>`;
                    }).get().reverse();

                    $servicesTable.find('tbody').prepend($newRows);

                    // Refresh the table
                    RealTimeTable();
                    RealTimeCheckbox();
                },
                error: function (xhr, textStatus, errorThrown) {
                    alert('Error adding service');
                }
            });
        }

        function RemoveAddedService1(serviceName) {
            /*Show the confirmation box here*/
            $.ajax({
                url: "/Home/RemoveAddedService",
                type: "POST",
                data: { serviceName: serviceName },
                success: function () {
                    $("#serviceTable tbody").empty();

                    RealTimeTable();
                    RealTimeCheckbox();
                },
                error: function () {
                    alert("Failed to delete " + serviceName);
                }
            });
        }

        function RemoveAddedService(serviceName, command) {
            /*Show the confirmation box here*/
            var modal = document.getElementById("alert-modal");
            var modalTitle = document.getElementById("modal-title");
            var modalMessage = document.getElementById("modal-message");
            var btnYes = document.getElementById("btnYes");
            var btnNo = document.getElementById("btnNo");

            modal.style.display = "block";
            modalTitle.innerHTML = "<i class='bi bi-exclamation-triangle-fill text-warning'></i> System Message";
            modalMessage.innerHTML = "Are you sure you want to " + command.toUpperCase() + " '" + serviceName + "'?";
            btnYes.onclick = function () {
                $.ajax({
                    url: "/Home/RemoveAddedService",
                    type: "POST",
                    data: { serviceName: serviceName, command: command },
                    success: function () {
                        $("#serviceTable tbody").empty();
                        RealTimeTable();
                        RealTimeCheckbox();

                        var commandText = command.toUpperCase();
                        if (command === "delete") {
                            commandText = "DELETED";
                        }

                        var toast = new bootstrap.Toast(document.getElementById('liveToast'));
                        var toastMessage = "You " + commandText + " the service " + "' " + serviceName + " '" + ".";
                        document.querySelector('.toast-body').innerHTML = toastMessage;
                        toast.show();

                        setTimeout(function () {
                            toast.dispose();
                        }, 4000);

                    },
                    error: function () {
                        alert("Failed to delete " + serviceName);
                    }
                });
                modal.style.display = "none";
            }
            btnNo.onclick = function () {
                modal.style.display = "none";
            }
        }
    </script>

    <!-- Alert Box for all buttons in Action column -->
    <div id="alert-modal" class="modal">
        <div class="modal-content">
            <div id="modal-title">System Message</div>
            <div id="modal-message"></div>
            <div class="modal-buttons">
                <button type="button" id="btnYes" name="Yes" onclick="btnYes_Click" class="alert-buttons">Yes</button>
                <button type="button" id="btnNo" name="No" onclick="btnNo_Click" class="alert-buttons">No</button>
            </div>
        </div>
    </div>

    <!-- Nav Bar Active -->
    <script>
        $(document).ready(function () {
            // Get the current URL path
            var currentPath = window.location.pathname;

            // Find the link in the navigation bar that matches the current URL path and add the "active" class to it
            $('.navbar[href="' + currentPath + '"]').addClass('active');

            // Handle click events on the navigation links
            $('.navbar').click(function () {
                // Remove the "active" class from all links in the navigation bar
                $('.navbar').removeClass('active');

                // Add the "active" class to the clicked link
                $(this).addClass('active');
            });
        });

    </script>

    <!-- Selecting Rows Dropdown for Log History -->
    <script>
        const optionMenu1 = document.querySelector(".select-menu"),
            select_btn1 = optionMenu1.querySelector(".select-btn1"),
            options1 = optionMenu1.querySelectorAll(".option"),
            sBtn_text1 = optionMenu1.querySelector(".sBtn-text");

        select_btn1.addEventListener("click", () => optionMenu1.classList.toggle("active"));

        options1.forEach(option => {
            option.addEventListener("click", () => {
                let selectedOption = option.querySelector(".option-text").innerText;
                sBtn_text1.innerText = selectedOption;

                optionMenu1.classList.remove("active");
            });
        });
    </script>

    <!-- Selecting Rows Dropdown for Service Table -->
    <script>
        const optionMenu2 = document.querySelector(".serviceRow"),
            select_btn2 = optionMenu2.querySelector(".btnRow"),
            options2 = optionMenu2.querySelectorAll(".optionRow"),
            sBtn_text2 = optionMenu2.querySelector(".sBtnRow");

        select_btn2.addEventListener("click", () => optionMenu2.classList.toggle("active"));

        options2.forEach(option => {
            option.addEventListener("click", () => {
                let selectedOption = option.querySelector(".optionRow-text").innerText;
                sBtn_text2.innerText = selectedOption;

                optionMenu2.classList.remove("active");
            });
        });
    </script>

    <!-- Restart and Delete Modal -->
    <script>
        // Action Button
        const run = document.getElementById('btnRun');
        const stop = document.getElementById('btnStop');
        const restart = document.getElementById('btnRestart');
        const del = document.getElementById('btnDelete');


        run.addEventListener('click', () => {
            stop.style.display = "inline-block";
            restart.style.display = "inline-block";
            run.style.display = "none";
            del.style.display = "none";
        });

        stop.addEventListener('click', () => {
            stop.style.display = "none";
            restart.style.display = "none";
            run.style.display = "inline-block";
            del.style.display = "inline-block";
        });

        restart.addEventListener('click', () => {
            stop.style.display = "inline-block";
            restart.style.display = "inline-block";
            run.style.display = "none";
            del.style.display = "none";
        });

        // Show Alert Button when the restart button clicked and hide it.
        function showModal(title, message) {
            var modal = document.getElementById('myModal');
            var modalTitle = document.getElementById('modal-title');
            var modalMessage = document.getElementById('modal-message');

            modal.style.display = "block";
            modalTitle.textContent = title;
            modalMessage.textContent = message;
        }

        function hideModal() {
            var modal = document.getElementById('myModal');
            modal.style.display = "none";
        }
        // Select the Yes and No buttons
        var btnYes = document.getElementById('btnYes');
        var btnNo = document.getElementById('btnNo');

        // Add event listeners to the buttons
        btnYes.addEventListener('click', btnYes_Click);
        btnNo.addEventListener('click', btnNo_Click);

        function btnYes_Click() {
            updateDateTime();
            hideModal();
        }

        function btnNo_Click() {
            hideModal();
        }

        // Show Alert Button when the delete button clicked and hide it.
        function showdeleteModal(title, message) {
            var modal = document.getElementById('deleteModal');
            var modalTitle = document.getElementById('modal-title1');
            var modalMessage = document.getElementById('modal-message1');

            modal.style.display = "block";
            modalTitle.textContent = title;
            modalMessage.textContent = message;
        }

        function hidedeleteModal() {
            var modal = document.getElementById('deleteModal');
            modal.style.display = "none";
        }
        // Select the Yes and No buttons
        var btnDe = document.getElementById('btnDel');
        var btnCancel = document.getElementById('btnCancel');

        // Add event listeners to the buttons
        btnDe.addEventListener('click', btnDel_Click);
        btnCancel.addEventListener('click', btnCancel_Click);

        function btnDel_Click() {
            hidedeleteModal();
        }

        function btnCancel_Click() {
            hidedeleteModal();
        }
    </script>

</body>



