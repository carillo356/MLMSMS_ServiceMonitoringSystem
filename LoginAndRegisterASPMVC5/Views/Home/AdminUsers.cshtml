@model LoginAndRegisterASPMVC5.Models.User
@{
    ViewBag.Title = "Users";
    Layout = "~/Views/Shared/_LayoutPage1.cshtml";
}

<body class="bgcolor">
    <!-- Nav Bar with Responsive -->
    <header>
        <div class="container-fluid">
            <div class="navb-name">
                MLM Service Monitoring System
            </div>

            <div class="navb-items d-none d-xl-flex">
                <div class="menu-item">
                    <a href="@Url.Action("Index","Home")" class="navbar">Home</a>
                </div>

                <div class="menu-item">
                    <a href="@Url.Action("Users","Home")" class="navbar active">Users</a>
                </div>

                <div class="item-button">
                    <a href="@Url.Action("Logout","Home")" type="button">Logout</a>
                </div>
            </div>

            <!-- Button trigger modal (Responsive) -->
            <div class="mobile-toggler d-lg-none">
                <a href="#" data-bs-toggle="modal" data-bs-target="#navbModal">
                    <i class="bi bi-list"></i>
                </a>
            </div>

            <!-- Modal (Responsive) -->
            <div class="modal fade" style="width: 500px;" id="navbModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="title">MLM Service Monitoring System</div>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"><i class="bi bi-x-lg"></i></button>
                        </div>

                        <div class="modal-body">
                            <div class="modal-line">
                                <a href="@Url.Action("Index","Home")" class="btn btn-primary"><i class="bi bi-house"></i> Home</a>
                            </div>

                            <div class="modal-line">
                                <a href="@Url.Action("Users","Home")" class="btn btn-primary"><i class="bi bi-bell"></i>Users</a>
                            </div>

                            <a href="@Url.Action("Logout","Home")" class="navb-button" type="button">Logout</a>
                        </div>

                        <div class="mobile-modal-footer">
                            <a target="_blank" href="#"><i class="bi bi-instagram"></i></a>
                            <a target="_blank" href="#"><i class="bi bi-linkedin"></i></a>
                            <a target="_blank" href="#"><i class="bi bi-youtube"></i></a>
                            <a target="_blank" href="#"><i class="bi bi-facebook"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Users Table -->
    <div class="container-xl">
        <div class="table-responsive">
            <div class="table-wrapper">
                <div class="table-title">
                    <div class="row">
                        <div class="col-sm-6">
                            <h2><b>List of Users</b></h2>
                        </div>
                        <div class="col-sm-6 button-container">
                            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addUsers-modal"><i class="bi bi-plus-circle"></i><span>Add Users</span></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <table class="table table-hover" id="usersTable">
        <thead>
            <tr>
                <th scope="col" style="width: 15%;">FIRST NAME</th>
                <th scope="col" style="width: 15%;">LAST NAME</th>
                <th scope="col" style="width: 10%;">EMAIL ADDRESS</th>
                <th scope="col" style="width: 10%;">USER ROLE</th>
                <th scope="col" style="width: 15%;">ACTION</th>
            </tr>
        </thead>
        <tbody>
            <!-- table content goes here -->
        </tbody>
    </table>
    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <div class="adminRow">
                    <div class="btn_AdminRow">
                        <span class="sBtn_AdminRow">Select row</span>
                        <i class="bi bi-arrow-down-short"></i>
                    </div>

                    <ul class="options_AdminRow">
                        <li class="option_Admin">
                            <span class="option_Admin-text">5 rows</span>
                        </li>
                        <li class="option_Admin">
                            <span class="option_Admin-text">10 rows</span>
                        </li>
                        <li class="option_Admin">
                            <span class="option_Admin-text">15 rows</span>
                        </li>
                        <li class="option_Admin">
                            <span class="option_Admin-text">20 rows</span>
                        </li>
                        <li class="option_Admin">
                            <span class="option_Admin-text">All rows</span>
                        </li>
                    </ul>
                </div>
            </div>
            <div class="col-md-4">
                <div class="hint-text">Page <b>1</b> out of <b>5</b></div>
            </div>
            <div class="col-md-4">
                <ul class="pagination">
                    <li class="page-item"><a href="#" class="page-link">Previous</a></li>
                    <li class="page-item active"><a href="#" class="page-link">1</a></li>
                    <li class="page-item"><a href="#" class="page-link">2</a></li>
                    <li class="page-item"><a href="#" class="page-link">3</a></li>
                    <li class="page-item"><a href="#" class="page-link">4</a></li>
                    <li class="page-item"><a href="#" class="page-link">5</a></li>
                    <li class="page-item"><a href="#" class="page-link">Next</a></li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Add Users Modal -->
    <div class="modal fade" id="addUsers-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-center" id="exampleModalLabel">Add user</h5>
                    @*<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>*@
                </div>
                <div class="modal-body">
                    <form id="add-user-form" method="post" @*action="@Url.Action("AddUser", "Home")*@>
                        <div id="validation-summary">
                            @Html.ValidationSummary(true)
                        </div>
                        @Html.AntiForgeryToken()

                        <div class="form-group m-3">
                            @Html.LabelFor(m => m.FirstName, "First Name:", new { @class = "label fw-bold" })
                            @Html.TextBoxFor(m => m.FirstName, "", new { @class = "form-control", autocomplete = "off" })
                            @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "badge badge-danger" })
                        </div>

                        <div class="form-group m-3">
                            @Html.LabelFor(m => m.LastName, "Last Name:", new { @class = "label fw-bold" })
                            @Html.TextBoxFor(m => m.LastName, "", new { @class = "form-control", autocomplete = "off" })
                            @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "badge badge-danger" })
                        </div>

                        <div class="form-group m-3">
                            @Html.LabelFor(m => m.Email, "Email Address:", new { @class = "label fw-bold" })
                            @Html.TextBoxFor(m => m.Email, "", new { @class = "form-control", autocomplete = "off" })
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "badge badge-danger" })
                            @if (ViewBag.error != null)
                            {
                                <span class="badge badge-danger">@ViewBag.error</span>
                            }
                        </div>

                        <div class="form-group m-3 position-relative">
                            @Html.LabelFor(m => m.Password, "Password:", new { @class = "label fw-bold" })
                            @Html.PasswordFor(m => m.Password, new { @class = "form-control", id = "password1" })
                            <span toggle="#password1" class="bi bi-eye-fill field-icon toggle-password"></span>
                            @Html.ValidationMessageFor(m => m.Password, "", new { @class = "badge badge-danger" })
                        </div>

                        <div class="form-group m-3">
                            <div class="radio-container">
                                <label>
                                    @Html.RadioButtonFor(m => m.IsAdmin, "True", new { onchange = "this.value = this.checked" })
                                    <span>Admin</span>
                                </label>
                                <label>
                                    @Html.RadioButtonFor(m => m.IsAdmin, "False", new { onchange = "this.value = !this.checked" })
                                    <span>Not Admin</span>
                                </label>
                                <small class="text-muted ml-2 adminReminder">
                                    <i class="bi bi-info-circle " data-toggle="tooltip" data-placement="bottom" title="Only an Admin can add other users and edit other users info including passwords."></i>
                                </small>
                            </div>
                        </div>
                        <div class="form-group">
                            <button type="submit" name="submit" class="btn btn-primary mt-3 mb-2 " value="addUser">Add User</button>
                            <button type="button" id="cancelButton" class="btn btn-primary custom-button" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!--Edit Users Modal -->
    <div class="modal fade" id="editUsers-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-center" id="exampleModalLabel">Edit user</h5>
                    @*<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>*@
                </div>
                <div class="modal-body">
                    <form id="edit-user-form" onsubmit="Event.preventDefault();" method="post" action="@Url.Action("UpdateUser", "Home")">
                        @Html.ValidationSummary()
                        @Html.AntiForgeryToken()

                        <div class="form-group m-3">
                            <label for="firstName" class="label fw-bold">First Name:</label>
                            <input type="text" id="firstName" name="FirstName" class="form-control" placeholder="First Name" value="" autocomplete="off" />
                            <input type="hidden" id="idUser" name="IdUser" value="" />
                        </div>

                        <div class="form-group m-3">
                            <label for="lastName" class="label fw-bold">Last Name:</label>
                            <input type="text" id="lastName" name="LastName" class="form-control" placeholder="Last Name" value="" autocomplete="off" />
                        </div>

                        <div class="form-group m-3">
                            <label for="email" class="label fw-bold">Email Address:</label>
                            <input type="email" id="email" name="Email" class="form-control" placeholder="Email Address" value="" autocomplete="off" />
                        </div>

                        <div class="form-group m-3 position-relative">
                            @Html.LabelFor(m => m.Password, "Password:", new { @class = "label fw-bold" })
                            @Html.PasswordFor(m => m.Password, new { @class = "form-control", @placeholder = "Password", id = "password2" })
                            <span toggle="#password2" class="bi bi-eye-fill field-icon toggle-password"></span>
                            @Html.ValidationMessageFor(m => m.Password, "", new { @class = "badge badge-danger" })
                        </div>

                        <div class="form-group m-3">
                            <div class="radio-container">
                                <label>
                                    <input type="radio" name="IsAdmin" id="isAdminTrue" value="true" />
                                    <span>Admin</span>
                                </label>
                                <label>
                                    <input type="radio" name="IsAdmin" id="isAdminFalse" value="false" />
                                    <span>Non-Admin</span>
                                </label>
                                <small class="text-muted ml-2 adminReminder">
                                    <i class="bi bi-info-circle " data-toggle="tooltip" data-placement="bottom" title="Only an Admin can add other users and edit other users info including passwords."></i>
                                </small>
                            </div>
                        </div>
                        <div class="form-group">
                            <button type="submit" name="submit" class="btn btn-primary mt-3 mb-2" data-bs-dismiss="modal" value="addUser">Save Changes</button>
                            <button type="button" id="cancel-button" class="btn btn-primary custom-button" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Design for any Action -->
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
        <div id="liveToast" class="toast hide" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <i class="bi bi-info-circle"></i>
                <strong class="me-auto">  System Message</strong>
            </div>
            <div class="toast-body">
            </div>
        </div>
    </div>



    <script>
    $(document).ready(function () {
      // Handle form submission using AJAX
      $('#add-user-form').submit(function (event) {
        event.preventDefault(); // Prevent default form submission behavior

        // Send form data using AJAX
            $.ajax({
              url: '@Url.Action("AddUser", "Home")',
              type: 'POST',
              data: $(this).serialize(),
                success: function (result) {
                    RealTimeUsersTable();
                    if (result.success) {
                        // Update table with new user data
                        $('#user-table').html(result);

                        var toast = new bootstrap.Toast(document.getElementById('liveToast'));
                        var toastMessage = "User successfully added!";
                        document.querySelector('.toast-body').innerHTML = toastMessage;
                        toast.show();

                        setTimeout(function () {
                            toast.hide();
                        }, 4000);

                        // Hide modal
                        $('#addUsers-modal').modal('hide');

                    } else {
                        // Check if there is a validation summary
                        if (result.message) {
                            // Display validation summary
                            $('#validation-summary').html(result.message);
                        } else {
                            // Display error message
                            alert(result.message);
                        }
                    }
                }
            });
          });
        });

    </script>

    <script>
    $(document).ready(function () {
      // Handle form submission using AJAX
      $('#edit-user-form').submit(function (event) {
        event.preventDefault(); // Prevent default form submission behavior

        // Send form data using AJAX
        $.ajax({
          url: '@Url.Action("UpdateUser", "Home")',
          type: 'POST',
          data: $(this).serialize(),
            success: function (result) {
                RealTimeUsersTable();
                if (result.success) {
                    // Update table with new user data
                    $('#user-table').html(result);

                    var toast = new bootstrap.Toast(document.getElementById('liveToast'));
                    var toastMessage = result.message;
                document.querySelector('.toast-body').innerHTML = toastMessage;
                toast.show();

                setTimeout(function () {
                    toast.hide();
                }, 4000);

                    // Hide modal
                    $('#editUsers-modal').modal('hide');

                } else {
                    // Display error message
                    alert(result.message);
                }
            }
        });
      });
    });
    </script>

    <!-- Clear all field when clicking the Cancel Button for Add users -->
    <script>
        document.getElementById('cancelButton').addEventListener('click', function () {
            document.getElementById('add-user-form').reset();

            document.getElementById('addUserButton').addEventListener('click', function () {
                setTimeout(function () {
                    document.getElementById('add-user-form').reset();
                }, 500);
            });
        });
    </script>

    <!-- Clear all fields when clicking the Cancel Button for Edit users -->
    <script>
        $(function () {
            // Function to clear all input fields
            function clearFields() {
                $('#edit-user-form input[type="text"], #edit-user-form input[type="email"], #edit-user-form input[type="password"], #edit-user-form input[type="radio"]').val('');
            }

            // Attach the clearFields function to the Cancel button click event
            $('#cancel-button').click(function () {
                clearFields();
            });
        });
    </script>

    <!-- Show/Hide Password with eye icon -->
    <script>
        $(".toggle-password").click(function () {
            var input = $($(this).attr("toggle"));
            if (input.attr("type") == "password") {
                input.attr("type", "text");
                $(this).removeClass("bi-eye-fill").addClass("bi-eye-slash-fill");
            } else {
                input.attr("type", "password");
                $(this).removeClass("bi-eye-slash-fill").addClass("bi-eye-fill");
            }
        });
    </script>

    <!-- Delete Users Modal -->
    <div id="deleteUsers-modal" class="modal">
        <div class="modal-content">
            <div id="modal-title">System Message</div>
            <div id="modal-message"></div>
            <div class="modal-buttons">
                <button type="button" id="btnYes" name="Yes" onclick="btnYes_Click" class="alert-buttons">Yes</button>
                <button type="button" id="btnNo" name="No" onclick="btnNo_Click" class="alert-buttons">No</button>
            </div>
        </div>
    </div>

    <!-- Selecting Rows Dropdown for Users (Admin) Table -->
    <script>
        const optionMenu2 = document.querySelector(".adminRow"),
            select_btn2 = optionMenu2.querySelector(".btn_AdminRow"),
            options2 = optionMenu2.querySelectorAll(".option_Admin"),
            sBtn_text2 = optionMenu2.querySelector(".sBtn_AdminRow");

        select_btn2.addEventListener("click", () => optionMenu2.classList.toggle("active"));

        options2.forEach(option => {
            option.addEventListener("click", () => {
                let selectedOption = option.querySelector(".option_Admin-text").innerText;
                sBtn_text2.innerText = selectedOption;

                optionMenu2.classList.remove("active");
            });
        });
    </script>

    <!-- Show Modal -->
    <script>

        var myModal = new bootstrap.Modal(document.getElementById('signup-modal'));
        myModal.show();
    </script>

    <!-- Tooltip, DeleteUser & EditUser -->
    <script>
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })

        $(document).ready(function () {
            RealTimeUsersTable()
        });

        function DeleteUser(idUser, FirstName, LastName, command) {
            /*Show the confirmation box here*/
            var modal = document.getElementById("deleteUsers-modal");
            var modalTitle = document.getElementById("modal-title");
            var modalMessage = document.getElementById("modal-message");
            var btnYes = document.getElementById("btnYes");
            var btnNo = document.getElementById("btnNo");

            modal.style.display = "block";
            modalTitle.innerHTML = "<i class='bi bi-exclamation-triangle-fill text-warning'></i> System Message";
            modalMessage.innerHTML = "Are you sure you want to " + command.toUpperCase() + " User" + " '" + FirstName + " " + LastName + "'?";
            btnYes.onclick = function () {
                $.ajax({
                    type: 'POST',
                    url: '/Home/DeleteUser',
                    data: { idUser: idUser },
                    success: function () {
                        RealTimeUsersTable();

                        var commandText = command.toUpperCase();
                        if (command === "delete") {
                            commandText = "DELETED";
                        }

                        var toast = new bootstrap.Toast(document.getElementById('liveToast'));
                        var toastMessage = "You " + commandText + " the user  " + "' " + FirstName + " " + LastName + " '" + ".";
                        document.querySelector('.toast-body').innerHTML = toastMessage;
                        toast.show();

                        setTimeout(function () {
                            toast.hide();
                        }, 4000);
                    },
                    error: function (xhr, status, error) {
                        alert(error);
                    }
                });
                modal.style.display = "none";
            }
            btnNo.onclick = function () {
                modal.style.display = "none";
            }
        }

        function editUser(idUser, firstName, lastName, email, isAdmin) {
            // Set the values of the input fields in the modal
            $('#idUser').val(idUser);
            $('#firstName').val(firstName);
            $('#lastName').val(lastName);
            $('#email').val(email);

            // Check the appropriate radio button
            $('#isAdminTrue').prop('checked', isAdmin === "true");
            $('#isAdminFalse').prop('checked', isAdmin === "false");
        }

    </script>

    <!-- Pagination for Users Table -->
    <script>
        // define the number of items per page
        const ITEMS_PER_PAGE = 5;

        // get the table body element
        const tableBody = document.querySelector('#usersTable tbody');

        // get the pagination links
        const paginationLinks = document.querySelectorAll('.pagination .page-link');

        // define a function to show the items for the selected page
        function showPage(pageNumber) {
            // calculate the start and end indexes of the items to show
            const startIndex = (pageNumber - 1) * ITEMS_PER_PAGE;
            const endIndex = startIndex + ITEMS_PER_PAGE;

            // hide all rows in the table
            const rows = tableBody.querySelectorAll('tr');
            rows.forEach(row => {
                row.style.display = 'none';
            });

            // show the rows for the current page
            for (let i = startIndex; i < endIndex && i < rows.length; i++) {
                rows[i].style.display = '';
            }
        }

        function RealTimeUsersTable() {
            return new Promise(function (resolve, reject) {
                /*Refresh the table with the updated data*/
                $.ajax({
                    url: "/Home/RealTimeUsersTable",
                    type: "GET",
                    dataType: 'json',
                    success: function (result) {
                        $("#usersTable tbody").empty();
                        // Loop through the data and append each row to the table
                        result.forEach(function (Data) {
                            const Role = (Data.IsAdmin === true) ? '<span>Admin</span>' : '<span>Non-Admin</span>';

                            var row = "<tr data-toggle='modal' data-target='#service-modal'>";
                            row += "<td>" + Data.FirstName + "</td>";
                            row += "<td>" + Data.LastName + "</td>";
                            row += "<td>" + Data.Email + "</td>";
                            row += "<td>" + Role + "</td>";
                            row += "<td>";
                            if (Data.Email_Notification == true) {
                                row += "<button onclick='setNotification(\"" + Data.idUser + "\", \"" + Data.FirstName + "\", \"" + Data.LastName + "\", \"off\")' class='user-button btn-green' id='btnSet' data-bs-toggle='tooltip' data-bs-placement='top' title='Set Email On'>";
                                row += "<i class='bi bi-envelope-check-fill'></i>";
                                row += "</button>";
                            } else {
                                row += "<button onclick='setNotification(\"" + Data.idUser + "\", \"" + Data.FirstName + "\", \"" + Data.LastName + "\", \"on\")' class='user-button btn-red' id='btnSet' data-bs-toggle='tooltip' data-bs-placement='top' title='Set Email Off'>";
                                row += "<i class='bi bi-envelope-x-fill'></i>";
                                row += "</button>";
                            }

                            row += "<button onclick='editUser(\"" + Data.idUser + "\", \"" + Data.FirstName + "\", \"" + Data.LastName + "\", \"" + Data.Email + "\", \"" + Data.IsAdmin + "\", \"update\")' class='user-button' data-bs-toggle='modal' data-bs-target='#editUsers-modal'>";
                            row += "<i class='bi bi-pencil-square'></i>";
                            row += "</button>";

                            row += "<button onclick='DeleteUser(\"" + Data.idUser + "\", \"" + Data.FirstName + "\", \"" + Data.LastName + "\", \"delete\")' class='user-button' id='btnSet' data-bs-toggle='tooltip' data-bs-placement='top' title='Delete'>";
                            row += "<i class='bi bi-trash3-fill'></i>";
                            row += "</button>";

                            row += "</td></tr>";
                            $("#usersTable tbody").append(row);
                        });
                        resolve();
                    },
                    error: function () {
                        reject("Failed to refresh users.");
                    }
                });
            });
        }

        // show the first page by default
        $(document).ready(function () {
            RealTimeUsersTable().then(function () {
                showPage(pageNumber);
            });
        });

        function setNotification(idUser, FirstName, LastName, command) {
            $.ajax({
                type: 'POST',
                url: '/Home/UpdateEmailNotification',
                data: { idUser: idUser },
                success: function () {
                    $(document).ready(function () {
                        RealTimeUsersTable().then(function () {
                            showPage(pageNumber);
                        });
                    });

                    if (command === "on") {
                        commandText = "RECEIVE";
                    } else if (command === "off") {
                        commandText = "NOT RECEIVE";
                    }

                    var toast = new bootstrap.Toast(document.getElementById('liveToast'));
                    var toastMessage = "User " + "' " + FirstName + " " + LastName + " '" + " WILL " + commandText + " email notifications.";
                    document.querySelector('.toast-body').innerHTML = toastMessage;
                    toast.show();

                    setTimeout(function () {
                        toast.hide();
                    }, 4000);
                },
                error: function (xhr, status, error) {
                    alert(error);
                }
            });
        }

        var pageNumber = 1;
        // handle the click event of the pagination links
        paginationLinks.forEach(link => {
            link.addEventListener('click', event => {
                event.preventDefault();
                // get the selected page number from the link's text
                pageNumber = parseInt(link.innerText);

                // show the items for the selected page
                showPage(pageNumber);

                // mark the selected page as active
                paginationLinks.forEach(link => {
                    link.parentElement.classList.remove('active');
                });
                link.parentElement.classList.add('active');
            });
        });
    </script>


</body>


