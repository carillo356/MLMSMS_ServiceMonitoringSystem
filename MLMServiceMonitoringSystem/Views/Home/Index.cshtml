@{
    ViewBag.Title = "MLM Homepage";
    Layout = "~/Views/Shared/_LayoutPage1.cshtml";
    bool isAdminSession = Session["IsAdmin"] != null && (bool)Session["IsAdmin"];
}

<body class="bgcolor">
    <!-- Nav Bar with Responsive -->
    <header>
        <div class="container-fluid">
            <div class="navb-name">
                MLM Service Monitoring System
            </div>

            <div class="navb-items d-none d-xl-flex">
                <div class="menu-item">
                    <a href="@Url.Action("Index","Home")" class="navbar active">Home</a>
                </div>

                <div class="menu-item">
                    <a href="@Url.Action("Users","Home")" class="navbar">Users</a>
                </div>

                <div class="item-button">
                    <a href="@Url.Action("Logout","Home")" type="button">Logout</a>
                </div>
            </div>

            <!-- Button trigger modal (Responsive) -->
            <div class="mobile-toggler d-lg-none">
                <a href="#" data-bs-toggle="modal" data-bs-target="#navbModal">
                    <i class="bi bi-list"></i>
                </a>
            </div>

            <!-- Modal (Responsive) -->
            <div class="modal fade" style="width: 500px;" id="navbModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="title">MLM Service Monitoring System</div>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"><i class="bi bi-x-lg"></i></button>
                        </div>

                        <div class="modal-body">
                            <div class="modal-line">
                                <a href="@Url.Action("Index","Home")" class="btn btn-primary"><i class="bi bi-house"></i>Home</a>
                            </div>

                            <div class="modal-line">
                                <a href="@Url.Action("Users","Home")" class="btn btn-primary"><i class="bi bi-people"></i>Users</a>
                            </div>

                            <a href="@Url.Action("Logout","Home")" class="navb-button" type="button">Logout</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Dropdown menu in selecting no. of rows for Log History Table -->
    <div id="logHistory-modal" class="modal">
        <div class="modal-servicelogs">
            <span class="close">&times;</span>
            <div class="service_title">Log History</div>
            <div class="service_name mb-2 fst-italic"></div>

            <table class="table" id="popupTable">
                <thead>
                    <tr class="border-4 border-dark">
                        <th scope="col" style="width: 25%;">LAST START</th>
                        <th scope="col" style="width: 25%;">LAST LOG</th>
                        <th scope="col">STATUS</th>
                        <th scope="col" style="width: 20%;">HOST NAME</th>
                        <th scope="col" style="width: 25%;">LOG BY</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- table content goes here -->
                </tbody>
            </table>
            <div class="container">
                <div class="row">
                    <div class="col-md-3">
                        <div class="logHistoryRow">
                            <div class="btnLogHistoryRow">
                                <span class="sBtnLogHistoryRow">Select row</span>
                                <i class="bi bi-arrow-down-short"></i>
                            </div>

                            <ul class="options_LogHistoryRow">
                                <li class="option_LogHistory">
                                    <span class="option_LogHistory-text">5 rows</span>
                                </li>
                                <li class="option_LogHistory">
                                    <span class="option_LogHistory-text">10 rows</span>
                                </li>
                                <li class="option_LogHistory">
                                    <span class="option_LogHistory-text">15 rows</span>
                                </li>
                                <li class="option_LogHistory">
                                    <span class="option_LogHistory-text">20 rows</span>
                                </li>
                                <li class="option_LogHistory">
                                    <span class="option_LogHistory-text">All rows</span>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-5">
                        <div class="hint-logText">Page <b id="current-page-log-history"></b> out of <b id="total-pages-log-history"></b></div>
                    </div>
                    <div class="col-md-4">
                        <div class="pagination paginationLogs">
                            <ul>
                                <!--pages or li are comes from javascript -->
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Adding Service with Checkbox Modal -->
    <div class="modal fade" id="displayService-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-center" id="exampleModalLabel">Add Services</h5>
                    <button type="button" class="btn-close" id="btnCloseService" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-left">
                        <form onsubmit="event.preventDefault();" class="d-flex align-items-center mb-0">
                            <div class="form-group m-3" style="width: 100%;">
                                <input type="text" name="ServiceName" class="form-control search-box" autocomplete="off" placeholder="Search" />
                            </div>
                        </form>
                    </div>
                    <div id="error-container-addservices">
                        <!-- Error message will be inserted here by JavaScript -->
                    </div>
                    <div class="list-group">
                        <div id="serviceCheckboxes"></div>
                    </div>
                </div>


                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary custom-button" id="btnAddService" onclick="submitForm()">Add</button>
                    <button type="button" class="btn btn-secondary custom-button" id="btnCancelService" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Generic error message -->
    <div id="error-container">
        <!-- Error message will be inserted here by JavaScript -->
    </div>

    <!-- Service Table Modal -->
    <div class="container-xl">
        <div class="table-responsive">
            <div class="table-wrapper">
                <div class="table-title">
                    <div class="row">
                        <div class="col-sm-6">
                            <h2><b>List of Services</b></h2>
                        </div>
                        <div class="col-sm-6 button-container">
                            @if (Session["IsAdmin"] != null && (bool)Session["IsAdmin"])
                            {
                                <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#displayService-modal"><i class="bi bi-plus-circle"></i><span>Add Services</span></button>
                            }
                            <button type="button" class="btn btn-success" onclick="ServicesInMonitor();"><i class="bi bi-arrow-clockwise"></i><span>Refresh List</span></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <table class="table table-hover" id="serviceTable">
            <thead>
                <tr>
                    <th scope="col" style="width: 15%;">SERVICE NAME</th>
                    <th scope="col" style="width: 15%;">LAST START</th>
                    <th scope="col" style="width: 12%;">LAST LOG</th>
                    <th scope="col" style="width: 12%;">SERVICE STATUS</th>
                    <th scope="col" style="width: 15%;">HOSTNAME</th>
                    <th scope="col" style="width: 15%;">LOG BY</th>
                    <th scope="col" style="width: 15%;">ACTION</th>
                </tr>
            </thead>
            <tbody>
                <!-- table content goes here -->
            </tbody>
        </table>
        <div class="container">
            <div class="row">
                <div class="col-md-3">
                    <div class="serviceRow">
                        <div class="btnRow">
                            <span class="sBtnRow">Select row</span>
                            <i class="bi bi-arrow-down-short"></i>
                        </div>

                        <ul class="optionsRow">
                            <li class="optionRow">
                                <span class="optionRow-text">5 rows</span>
                            </li>
                            <li class="optionRow">
                                <span class="optionRow-text">10 rows</span>
                            </li>
                            <li class="optionRow">
                                <span class="optionRow-text">15 rows</span>
                            </li>
                            <li class="optionRow">
                                <span class="optionRow-text">20 rows</span>
                            </li>
                            <li class="optionRow">
                                <span class="optionRow-text">All rows</span>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="hint-text">Page <b id="current-page"></b> out of <b id="total-pages"></b></div>
                </div>
                <div class="col-md-3">
                    <div class="pagination paginationService">
                        <ul>
                            <!--pages or li are comes from javascript -->
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Stacked Toast Design for any ACTION -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 11">
        <div id="toast-wrapper"></div>
    </div>

    <!-- Alert Box for all buttons in Action column -->
    <div id="alert-modal" class="modal">
        <div class="modal-content">
            <div id="modal-title">System Message</div>
            <div id="modal-message"></div>
            <div class="modal-buttons">
                <button type="button" id="btnYes" name="Yes" onclick="btnYes_Click" class="alert-buttons">Yes</button>
                <button type="button" id="btnNo" name="No" onclick="btnNo_Click" class="alert-buttons">No</button>
            </div>
        </div>
    </div>

    <script src="~/JS_Scripts/index/serviceTable_Log.js"></script>

</body>

<script>
    var isAdminSession = @isAdminSession.ToString().ToLower();
</script>

<script>
    // Submit Form for Add Service
    function submitForm() {
        var serviceNames = [];
        var checkedCount = $('input[type="checkbox"]:checked').length;

        $('input[type="checkbox"]:checked').each(function () {
            serviceNames.push($(this).val());
        });

        if (serviceNames.length === 0) {
            // Display error message if no services are selected
            var errorContainer = document.getElementById("error-container-addservices");
            errorContainer.innerHTML = '<span>Please select a service/s</span>'
            return;
        }

        // Wrap each AddService call in a promise and store them in an array
        var promises = serviceNames.map(function (serviceName) {
            return new Promise(function (resolve, reject) {
                AddService(serviceName, resolve, reject);
            });
        });
        // Wait for all promises to complete
        Promise.all(promises).then(function () {
            SynchServiceTB();
        });


        if (serviceNames.length > 0) {
            var toastElement = document.createElement('div');
            toastElement.setAttribute('class', 'toast hide toast-stack');
            toastElement.setAttribute('role', 'alert');
            toastElement.setAttribute('aria-live', 'assertive');
            toastElement.setAttribute('aria-atomic', 'true');

            var toastBody = document.createElement('div');
            toastBody.setAttribute('class', 'toast-body');
            toastElement.appendChild(toastBody);

            var toastWrapper = document.getElementById('toast-wrapper');
            toastWrapper.appendChild(toastElement);

            var toast = new bootstrap.Toast(toastElement);
            var toastMessage = "You have added " + checkedCount + " service(s)";
            toastBody.innerHTML = toastMessage;

            // set background color to green if service/s has been added.
            toast._element.classList.remove("text-bg-danger");
            toast._element.classList.add("bg-success");

            toast.show();

            setTimeout(function () {
                toast.dispose();
            }, 4000);
        }
    }

    // Clear Field in Search Filter
    $(function () {
        // Function to clear search box input field
        function clearFields() {
            $('#displayService-modal .search-box').val('');
        }

        // Attach the clearFields function to the Cancel button click event
        $('#btnCancelService').click(function () {
            clearFields();
        });
    });

    // Selecting Rows Dropdown for Service Table
    const optionMenu2 = document.querySelector(".serviceRow"),
        select_btn2 = optionMenu2.querySelector(".btnRow"),
        options2 = optionMenu2.querySelectorAll(".optionRow"),
        sBtn_text2 = optionMenu2.querySelector(".sBtnRow");

    select_btn2.addEventListener("click", () => optionMenu2.classList.toggle("active"));

    options2.forEach(option => {
        option.addEventListener("click", () => {
            let selectedOption = option.querySelector(".optionRow-text").innerText;
            sBtn_text2.innerText = selectedOption;

            optionMenu2.classList.remove("active");
        });
    });

    // Selecting Rows Dropdown for Log History Table
    const optionMenuLogHistory = document.querySelector(".logHistoryRow"),
        selectBtnLogHistory = optionMenuLogHistory.querySelector(".btnLogHistoryRow"),
        optionsLogHistory = optionMenuLogHistory.querySelectorAll(".option_LogHistory"),
        sBtnTextLogHistory = optionMenuLogHistory.querySelector(".sBtnLogHistoryRow");

    selectBtnLogHistory.addEventListener("click", () => optionMenuLogHistory.classList.toggle("active"));

    optionsLogHistory.forEach(option => {
        option.addEventListener("click", () => {
            let selectedOption = option.querySelector(".option_LogHistory-text").innerText;
            sBtnTextLogHistory.innerText = selectedOption;

            optionMenuLogHistory.classList.remove("active");
        });
    });
</script>

<script>
    // Submit Form for Add Service
    function submitForm() {
        var serviceNames = [];
        var checkedCount = $('input[type="checkbox"]:checked').length;

        $('input[type="checkbox"]:checked').each(function () {
            serviceNames.push($(this).val());
        });

        if (serviceNames.length === 0) {
            // Display error message if no services are selected
            var errorContainer = document.getElementById("error-container-addservices");
            errorContainer.innerHTML = '<span>Please select a service/s</span>'
            return;
        }

        // Wrap each AddService call in a promise and store them in an array
        var promises = serviceNames.map(function (serviceName) {
            return new Promise(function (resolve, reject) {
                AddService(serviceName, resolve, reject);
            });
        });
        // Wait for all promises to complete
        Promise.all(promises).then(function () {
            SynchServiceTB();
        });


        if (serviceNames.length > 0) {
            var toastElement = document.createElement('div');
            toastElement.setAttribute('class', 'toast hide toast-stack');
            toastElement.setAttribute('role', 'alert');
            toastElement.setAttribute('aria-live', 'assertive');
            toastElement.setAttribute('aria-atomic', 'true');

            var toastBody = document.createElement('div');
            toastBody.setAttribute('class', 'toast-body');
            toastElement.appendChild(toastBody);

            var toastWrapper = document.getElementById('toast-wrapper');
            toastWrapper.appendChild(toastElement);

            var toast = new bootstrap.Toast(toastElement);
            var toastMessage = "You have added " + checkedCount + " service(s)";
            toastBody.innerHTML = toastMessage;

            // set background color to green if service/s has been added.
            toast._element.classList.remove("text-bg-danger");
            toast._element.classList.add("bg-success");

            toast.show();

            setTimeout(function () {
                toast.dispose();
            }, 4000);
        }
    }


    // Selecting Rows Dropdown for Service Table
    const optionMenu2 = document.querySelector(".serviceRow"),
        select_btn2 = optionMenu2.querySelector(".btnRow"),
        options2 = optionMenu2.querySelectorAll(".optionRow"),
        sBtn_text2 = optionMenu2.querySelector(".sBtnRow");

    select_btn2.addEventListener("click", () => optionMenu2.classList.toggle("active"));

    options2.forEach(option => {
        option.addEventListener("click", () => {
            let selectedOption = option.querySelector(".optionRow-text").innerText;
            sBtn_text2.innerText = selectedOption;

            optionMenu2.classList.remove("active");
        });
    });

    // Selecting Rows Dropdown for Log History Table
    const optionMenuLogHistory = document.querySelector(".logHistoryRow"),
        selectBtnLogHistory = optionMenuLogHistory.querySelector(".btnLogHistoryRow"),
        optionsLogHistory = optionMenuLogHistory.querySelectorAll(".option_LogHistory"),
        sBtnTextLogHistory = optionMenuLogHistory.querySelector(".sBtnLogHistoryRow");

    selectBtnLogHistory.addEventListener("click", () => optionMenuLogHistory.classList.toggle("active"));

    optionsLogHistory.forEach(option => {
        option.addEventListener("click", () => {
            let selectedOption = option.querySelector(".option_LogHistory-text").innerText;
            sBtnTextLogHistory.innerText = selectedOption;

            optionMenuLogHistory.classList.remove("active");
        });
    });
</script>

<script>
    /* Add and Remove Service*/
    function AddService(serviceName, resolve, reject) {
        $.ajax({
            url: "/Home/AddService",
            type: "POST",
            data: { serviceName: serviceName },
            dataType: 'json',
            success: function (response) {
                if (response.success) {
                    $('#error-container-addservices').html('');
                    resolve();
                }
                else {
                    var errorContainer = document.getElementById("error-container");
                    errorContainer.innerHTML = `
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                          <strong><i class="fa fa-exclamation"></i> Error!</strong> <span>${response.errorMessage}</span>
                          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>`;
                }
            },
            error: function (xhr) {
                var errorMessage = xhr.responseText;

                var errorContainer = document.getElementById("error-container");
                errorContainer.innerHTML = `
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <strong><i class="fa fa-exclamation"></i> Error!</strong> <span>${errorMessage}</span>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>`;
                reject();
            }
        }).then(function () {
            SynchServiceTB();
        })
    }

    function RemoveAddedService(serviceName, command) {
        // Show the confirmation box here
        var modal = document.getElementById("alert-modal");
        var modalTitle = document.getElementById("modal-title");
        var modalMessage = document.getElementById("modal-message");
        var btnYes = document.getElementById("btnYes");
        var btnNo = document.getElementById("btnNo");

        modal.style.display = "block";
        modalTitle.innerHTML = "<i class='bi bi-exclamation-triangle-fill text-warning'></i> System Message";
        modalMessage.innerHTML = "Are you sure you want to " + command.toUpperCase() + " '" + serviceName + "'?";
        btnYes.onclick = function () {
            $.ajax({
                url: "/Home/DeleteAddedService",
                type: "POST",
                data: { serviceName: serviceName, command: command },
                success: function (response) {
                    if (response.success) {
                        ServicesInMonitor();

                        var commandText = command.toUpperCase();
                        if (command === "delete") {
                            commandText = "DELETED";
                        }

                        var toastElement = document.createElement('div');
                        toastElement.setAttribute('class', 'toast hide toast-stack');
                        toastElement.setAttribute('role', 'alert');
                        toastElement.setAttribute('aria-live', 'assertive');
                        toastElement.setAttribute('aria-atomic', 'true');

                        var toastBody = document.createElement('div');
                        toastBody.setAttribute('class', 'toast-body');
                        toastElement.appendChild(toastBody);

                        var toastWrapper = document.getElementById('toast-wrapper');
                        toastWrapper.appendChild(toastElement);

                        var toast = new bootstrap.Toast(toastElement);
                        var toastMessage = "You " + commandText + " the service " + "' " + serviceName + " '" + ".";
                        toastBody.innerHTML = toastMessage;

                        if (commandText === "DELETED") {
                            // set background color to red if commandText is Deleted
                            toast._element.classList.remove("bg-success");
                            toast._element.classList.add("bg-danger");
                        }

                        toast.show();

                        setTimeout(function () {
                            toast.dispose();
                        }, 4000);
                    } else {
                        var errorContainer = document.getElementById("error-container");
                        errorContainer.innerHTML = `
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                          <strong><i class="fa fa-exclamation"></i> Error!</strong> <span>${response.errorMessage}</span>
                          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>`;
                    }
                },
                error: function (xhr) {
                    var errorMessage = xhr.responseText;

                    var errorContainer = document.getElementById("error-container");
                    errorContainer.innerHTML = `
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <strong><i class="fa fa-exclamation"></i> Error!</strong> <span>${errorMessage}</span>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>`;
                }
            }).then(function () {
                SynchServiceTB();
            });
            modal.style.display = "none";
        }
        btnNo.onclick = function () {
            modal.style.display = "none";
        }
    }

</script>

<script>
    $(document).ready(function () {

        function clearAndReset() {
            $("#error-container-addservices").html("");
            $('input[type="checkbox"]:checked').each(function () {
                $(this).prop("checked", false);
            });
            $('.search-box').val(''); // This line clears the input field with the search-box class
            $('.search-box').trigger('input'); // This line triggers the input event
        }

        $("#btnCancelService").on("click", clearAndReset);
        $("#btnCloseService").on("click", clearAndReset);
    });
</script>



