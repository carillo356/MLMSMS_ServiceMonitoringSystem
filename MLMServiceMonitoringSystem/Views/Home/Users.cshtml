@model LoginAndRegisterASPMVC5.Models.User
@{
    ViewBag.Title = "MLM Users";
    Layout = "~/Views/Shared/_LayoutPage1.cshtml";
    bool isAdminSession = Session["IsAdmin"] != null && (bool)Session["IsAdmin"];
}

<body class="bgcolor">
    <!-- Nav Bar with Responsive -->
    <header>
        <div class="container-fluid">
            <div class="navb-name">
                MLM Service Monitoring System
            </div>

            <div class="navb-items d-none d-xl-flex">
                <div class="menu-item">
                    <a href="@Url.Action("Index","Home")" class="navbar">Home</a>
                </div>

                <div class="menu-item">
                    <a href="@Url.Action("Users","Home")" class="navbar active">Users</a>
                </div>

                <div class="item-button">
                    <a href="@Url.Action("Logout","Home")" type="button">Logout</a>
                </div>
            </div>

            <!-- Button trigger modal (Responsive) -->
            <div class="mobile-toggler d-lg-none">
                <a href="#" data-bs-toggle="modal" data-bs-target="#navbModal">
                    <i class="bi bi-list"></i>
                </a>
            </div>

            <!-- Modal (Responsive) -->
            <div class="modal fade" style="width: 500px;" id="navbModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="title">MLM Service Monitoring System</div>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"><i class="bi bi-x-lg"></i></button>
                        </div>

                        <div class="modal-body">
                            <div class="modal-line">
                                <a href="@Url.Action("Index","Home")" class="btn btn-primary"><i class="bi bi-house"></i> Home</a>
                            </div>

                            <div class="modal-line">
                                <a href="@Url.Action("Users","Home")" class="btn btn-primary"><i class="bi bi-bell"></i>Users</a>
                            </div>

                            <a href="@Url.Action("Logout","Home")" class="navb-button" type="button">Logout</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Generic error message -->
    <div id="error-container">
        <!-- Error message will be inserted here by JavaScript -->
    </div>

    <!-- Users Table -->
    <div class="container-xl">
        <div class="table-responsive">
            <div class="table-wrapper">
                <div class="table-title">
                    <div class="row">
                        <div class="col-sm-6">
                            <h2><b>List of Users</b></h2>
                        </div>
                        @if (Session["IsAdmin"] != null && (bool)Session["IsAdmin"])
                        {
                            <div class="col-sm-6 button-container">
                                <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addUsers-modal"><i class="bi bi-plus-circle"></i><span>Add Users</span></button>
                            </div>
                        }
                        else
                        {
                            <div class="col-sm-6 button-container">
                                <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#changePass-modal"><i class="bi bi-lock"></i><span>Change Password</span></button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <table class="table" id="usersTable">
            <thead>
                <tr>
                    <th scope="col" style="width: 15%;">FIRST NAME</th>
                    <th scope="col" style="width: 15%;">LAST NAME</th>
                    <th scope="col" style="width: 15%;">EMAIL ADDRESS</th>
                    <th scope="col" style="width: 10%;">USER ROLE</th>
                    <th scope="col" style="width: 12%;">ACTION</th>
                </tr>
            </thead>
            <tbody>
                <!-- table content goes here -->
            </tbody>
        </table>
        <div class="container">
            <div class="row">
                <div class="col-md-3">
                    <div class="adminRow">
                        <div class="btn_AdminRow">
                            <span class="sBtn_AdminRow">Select row</span>
                            <i class="bi bi-arrow-down-short"></i>
                        </div>

                        <ul class="options_AdminRow">
                            <li class="option_Admin">
                                <span class="option_Admin-text">5 rows</span>
                            </li>
                            <li class="option_Admin">
                                <span class="option_Admin-text">10 rows</span>
                            </li>
                            <li class="option_Admin">
                                <span class="option_Admin-text">15 rows</span>
                            </li>
                            <li class="option_Admin">
                                <span class="option_Admin-text">20 rows</span>
                            </li>
                            <li class="option_Admin">
                                <span class="option_Admin-text">All rows</span>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="hint-text">Page <b id="current-page"></b> out of <b id="total-pages"></b></div>
                </div>
                <div class="col-md-3">
                    <div class="pagination">
                        <ul>
                            <!--pages or li are comes from javascript -->
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Change Password Modal -->
    <div class="modal" id="changePass-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-center" id="exampleModalLabel">Change my password</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="change-pass-form" onsubmit="Event.preventDefault();" method="post" action="@Url.Action("UpdateUserPassword", "Home")">
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(m => m.IdUser)

                        <div class="form-group m-3 position-relative">
                            @Html.Label("currentPassword", "Current Password:", new { @class = "label fw-bold" })
                            @Html.Password("currentPassword", null, new { @class = "form-control", id = "currentPassword" })
                            <span toggle="#currentPassword" class="bi bi-eye-slash-fill field-icon toggle-password"></span>
                        </div>

                        <div class="form-group m-3 position-relative">
                            @Html.Label("newPassword", "New Password:", new { @class = "label fw-bold" })
                            @Html.Password("newPassword", null, new { @class = "form-control", id = "newPassword" })
                            <span toggle="#newPassword" class="bi bi-eye-slash-fill field-icon toggle-password"></span>
                        </div>


                        <div class="form-group">
                            <button onclick="editPassword(@Session["IdUser"])" type="submit" name="submit" class="btn btn-primary mt-3 mb-2 " value="addUser">Save Changes</button>
                            <button type="button" id="cancelButton" class="btn btn-primary custom-button" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Users Modal -->
    <div class="modal" id="addUsers-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-center" id="exampleModalLabel">Add user</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="add-user-form" method="post">
                        <div id="validation-summary">
                            @Html.ValidationSummary(true)
                        </div>
                        @Html.AntiForgeryToken()

                        <div class="form-group m-3">
                            @Html.LabelFor(m => m.FirstName, "First Name:", new { @class = "label fw-bold" })
                            @Html.TextBoxFor(m => m.FirstName, "", new { @class = "form-control", autocomplete = "off" })
                            @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "badge badge-danger" })
                        </div>

                        <div class="form-group m-3">
                            @Html.LabelFor(m => m.LastName, "Last Name:", new { @class = "label fw-bold" })
                            @Html.TextBoxFor(m => m.LastName, "", new { @class = "form-control", autocomplete = "off" })
                            @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "badge badge-danger" })
                        </div>

                        <div class="form-group m-3">
                            @Html.LabelFor(m => m.Email, "Email Address:", new { @class = "label fw-bold" })
                            @Html.TextBoxFor(m => m.Email, "", new { @class = "form-control", autocomplete = "off" })
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "badge badge-danger" })
                            @if (ViewBag.error != null)
                            {
                                <span class="badge badge-danger">@ViewBag.error</span>
                            }
                        </div>

                        <div class="form-group m-3 position-relative">
                            @Html.LabelFor(m => m.Password, "Password:", new { @class = "label fw-bold" })
                            @Html.PasswordFor(m => m.Password, new { @class = "form-control", id = "password1" })
                            <span toggle="#password1" class="bi bi-eye-slash-fill field-icon toggle-password"></span>
                            @Html.ValidationMessageFor(m => m.Password, "", new { @class = "badge badge-danger" })
                        </div>

                        <div class="form-group m-3">
                            <div class="radio-container d-flex flex-column">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" name="IsAdmin" id="isAdminTrue" value="true" onchange="this.value = this.checked" />
                                    <label class="form-check-label" for="isAdminTrue">Admin</label>
                                </div>
                                <div class="text-muted ml-2 mt-2 d-flex flex-column adminReminder">
                                    <span class="ml-2 fst-italic"><i class="bi bi-info-circle"></i>Only an Admin can add other users and edit other users info including passwords.</span>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <button type="submit" name="submit" class="btn btn-primary mt-3 mb-2 " value="addUser">Add User</button>
                            <button type="button" id="cancelButton" class="btn btn-primary custom-button" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!--Edit Users Modal -->
    <div class="modal fade" id="editUsers-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-center" id="exampleModalLabel">Edit user</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="edit-user-form" onsubmit="Event.preventDefault();" method="post" action="@Url.Action("UpdateUser", "Home")">
                        @Html.ValidationSummary()
                        @Html.AntiForgeryToken()

                        <div class="form-group m-3">
                            <label for="firstName" class="label fw-bold">First Name:</label>
                            <input type="text" id="firstName" name="FirstName" class="form-control" placeholder="First Name" value="" autocomplete="off" />
                            <input type="hidden" id="idUser" name="IdUser" value="" />
                        </div>

                        <div class="form-group m-3">
                            <label for="lastName" class="label fw-bold">Last Name:</label>
                            <input type="text" id="lastName" name="LastName" class="form-control" placeholder="Last Name" value="" autocomplete="off" />
                        </div>

                        <div class="form-group m-3">
                            <label for="email" class="label fw-bold">Email Address:</label>
                            <input type="email" id="email" name="Email" class="form-control" placeholder="Email Address" value="" autocomplete="off" />
                        </div>

                        <div class="form-group m-3 position-relative">
                            @Html.LabelFor(m => m.Password, "Password:", new { @class = "label fw-bold" })
                            @Html.PasswordFor(m => m.Password, new { @class = "form-control", @placeholder = "Password", id = "password2" })
                            <span toggle="#password2" class="bi bi-eye-slash-fill field-icon toggle-password"></span>
                            @Html.ValidationMessageFor(m => m.Password, "", new { @class = "badge badge-danger" })
                        </div>

                        <div class="form-group m-3">
                            <div class="radio-container d-flex flex-column">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" name="IsAdmin" id="isAdmin" value="true" />
                                    <label class="form-check-label" for="isAdminTrue">Admin</label>
                                </div>
                                <div class="text-muted ml-2 mt-2 d-flex flex-column adminReminder">
                                    <span class="ml-2 fst-italic"><i class="bi bi-info-circle"></i>Only an Admin can add other users and edit other users info including passwords.</span>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <button type="submit" name="submit" class="btn btn-primary mt-3 mb-2" data-bs-dismiss="modal" value="addUser">Save Changes</button>
                            <button type="button" id="cancel-button" class="btn btn-primary custom-button" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Design for any Action -->
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
        <div id="liveToast" class="toast hide text-bg-danger" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-body">
            </div>
        </div>
    </div>

    <!-- Stacked Toast Design for any ACTION -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 11">
        <div id="toast-wrapper"></div>
    </div>

    <!-- Delete Users Modal -->
    <div id="deleteUsers-modal" class="modal">
        <div class="modal-content">
            <div id="modal-title">System Message</div>
            <div id="modal-message"></div>
            <div class="modal-buttons">
                <button type="button" id="btnYes" name="Yes" onclick="btnYes_Click" class="alert-buttons">Yes</button>
                <button type="button" id="btnNo" name="No" onclick="btnNo_Click" class="alert-buttons">No</button>
            </div>
        </div>
    </div>

    <script src="~/JS_Scripts/admin_Users/tooltip_deleteUser_editUser_modal.js"></script>
    <script src="~/JS_Scripts/admin_Users/dropdown_showhidePassword.js"></script>
    <script src="~/JS_Scripts/admin_Users/clearFields.js"></script>

</body>

<script>
    var isAdminSession = @isAdminSession.ToString().ToLower();
</script>

<script>
    // Pagination for Admin User Table

    let totalUserCount;
    let indexPage = 1;
    let pagination = document.querySelector('.pagination');
    let totalPages;

    let ITEMS_PER_PAGE = 5;

    // define the number of items per page
    $(document).ready(function () {
        Synch();
    });

    function Synch() {
        RealTimeUsersTable()
            .then(function () {
                showPage(indexPage);
            })
            .catch(function (error) {
                alert(error);
            });
    }

    // get the table body element
    const tableBody = document.querySelector('#usersTable tbody');

    // get the pagination links
    const paginationLinks = document.querySelectorAll('.pagination li');

    // define a function to show the items for the selected page
    function showPage(pageNumber) {
        // calculate the start and end indexes of the items to show
        const startIndex = (pageNumber - 1) * ITEMS_PER_PAGE;
        const endIndex = startIndex + ITEMS_PER_PAGE;

        // hide all rows in the table
        const rows = tableBody.querySelectorAll('tr');
        rows.forEach(row => {
            row.style.display = 'none';
        });

        // show the rows for the current page
        for (let i = startIndex; i < endIndex && i < rows.length; i++) {
            rows[i].style.display = '';
        }
        generatePageNumbers();
    }

    function RealTimeUsersTable() {
        return new Promise(function (resolve, reject) {
            /*Refresh the table with the updated data*/
            $.ajax({
                url: "/Home/RealTimeUsersTable",
                type: "GET",
                dataType: 'json',
                success: function (response) {
                    if (response.success) {
                        $("#usersTable tbody").empty();
                        // Loop through the data and append each row to the table
                        response.users.forEach(function (Data) {
                            const Role = (Data.IsAdmin === true) ? '<span><i class="bi bi-person-gear"></i></span>' : '<span><i class="bi bi-person"></i></span>';

                            var row = "<tr data-toggle='modal' data-target='#service-modal'>";
                            row += "<td>" + Data.FirstName + "</td>";
                            row += "<td>" + Data.LastName + "</td>";
                            row += "<td>" + Data.Email + "</td>";
                            row += "<td>" + Role + "</td>";
                            row += "<td>";
                            if (Data.Email_Notification == true) {
                                row += "<button onclick='setNotification(\"" + Data.IdUser + "\", \"" + Data.FirstName + "\", \"" + Data.LastName + "\", \"off\")' class='user-button btn-green' id='btnSet' data-bs-toggle='tooltip' data-bs-placement='top' title='Set Email On'>";
                                row += "<i class='bi bi-envelope-check-fill'></i>";
                                row += "</button>";
                            } else {
                                row += "<button onclick='setNotification(\"" + Data.IdUser + "\", \"" + Data.FirstName + "\", \"" + Data.LastName + "\", \"on\")' class='user-button btn-red' id='btnSet' data-bs-toggle='tooltip' data-bs-placement='top' title='Set Email Off'>";
                                row += "<i class='bi bi-envelope-x-fill'></i>";
                                row += "</button>";
                            }

                            if (isAdminSession) {
                                row += "<button onclick='editUser(\"" + Data.IdUser + "\", \"" + Data.FirstName + "\", \"" + Data.LastName + "\", \"" + Data.Email + "\", \"" + Data.IsAdmin + "\", \"update\")' class='user-button' data-bs-toggle='modal' data-bs-target='#editUsers-modal' data-bs-toggle='tooltip' data-bs-placement='top' title='Edit User'>";
                                row += "<i class='bi bi-pencil-square'></i>";
                                row += "</button>";

                                row += "<button onclick='DeleteUser(\"" + Data.IdUser + "\", \"" + Data.FirstName + "\", \"" + Data.LastName + "\", \"delete\")' class='user-button' id='btnDelete' data-bs-toggle='tooltip' data-bs-placement='top' title='Delete User'>";
                                row += "<i class='bi bi-trash3-fill'></i>";
                                row += "</button>";
                            }


                            row += "</td></tr>";
                            $("#usersTable tbody").append(row);
                        });
                        totalUserCount = response.users.length;
                        resolve();
                    }
                    else {
                        var errorContainer = document.getElementById("error-container");
                        errorContainer.innerHTML = `
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                          <strong><i class="fa fa-exclamation"></i> Error!</strong> <span>${response.errorMessage}</span>
                          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>`;
                    }
                },
                error: function (xhr) {
                    var errorMessage = xhr.responseText;

                    var errorContainer = document.getElementById("error-container");
                    errorContainer.innerHTML = `
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <strong><i class="fa fa-exclamation"></i> Error!</strong> <span>${errorMessage}</span>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>`;
                    reject();
                }
            });
        });
    }

    // Set up the event listener for options
    $('.options_AdminRow li').click(function () {
        var optionText = $(this).find('.option_Admin-text').text();
        switch (optionText) {
            case "All rows":
                ITEMS_PER_PAGE = totalUserCount;
                break;
            default:
                ITEMS_PER_PAGE = parseInt(optionText);
                break;
        }
        Synch(); // show the first page of the updated table
    });

    function setNotification(IdUser, FirstName, LastName, command) {
        $.ajax({
            type: 'POST',
            url: '/Home/UpdateEmailNotification',
            data: { IdUser: IdUser },
            success: function () {
                $(document).ready(function () {
                    RealTimeUsersTable().then(function () {
                        showPage(indexPage);
                    });
                });

                if (command === "on") {
                    commandText = "RECEIVE";
                } else if (command === "off") {
                    commandText = "NOT RECEIVE";
                }

                var toastElement = document.createElement('div');
                toastElement.setAttribute('class', 'toast hide toast-stack');
                toastElement.setAttribute('role', 'alert');
                toastElement.setAttribute('aria-live', 'assertive');
                toastElement.setAttribute('aria-atomic', 'true');

                var toastBody = document.createElement('div');
                toastBody.setAttribute('class', 'toast-body');
                toastElement.appendChild(toastBody);

                var toastWrapper = document.getElementById('toast-wrapper');
                toastWrapper.appendChild(toastElement);

                var toast = new bootstrap.Toast(toastElement);
                var toastMessage = "User " + "' " + FirstName + " " + LastName + " '" + " WILL " + commandText + " email notifications.";
                toastBody.innerHTML = toastMessage;

                if (commandText === "NOT RECEIVE") {
                    // set background color to red if commandText is Stopped
                    toast._element.classList.remove("bg-success");
                    toast._element.classList.add("bg-danger");
                } else {
                    // set background color to green for any other commandText
                    toast._element.classList.remove("bg-danger");
                    toast._element.classList.add("bg-success");
                }

                toast.show();

                setTimeout(function () {
                    toast.dispose();
                }, 4000);
            },
            error: function (xhr) {
                var errorMessage = xhr.responseText;

                var errorContainer = document.getElementById("error-container");
                errorContainer.innerHTML = `
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <strong><i class="fa fa-exclamation"></i> Error!</strong> <span>${errorMessage}</span>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>`;
            }
        });
    }

    function generatePageNumbers() {
        totalPages = Math.ceil(totalUserCount / ITEMS_PER_PAGE);
        pagination.innerHTML = '';

        let maxVisiblePages = 5;
        let startPage = indexPage - Math.floor(maxVisiblePages / 2);
        let endPage = startPage + maxVisiblePages - 1;

        if (startPage < 1) {
            startPage = 1;
            endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
        }

        if (endPage > totalPages) {
            endPage = totalPages;
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        if (indexPage > 1) {
            pagination.innerHTML = `<li class="page-item" id="previous-link"><button type="button" class="page-link">Previous</button></li>`;
        }

        for (let i = startPage; i <= endPage; i++) {
            // Check if the current iteration is the active page
            const isActive = i === indexPage;

            pagination.innerHTML += `<li class="page-item${isActive ? " active" : ""}"><button type="button" class="page-link" data-page="${i}">${i}</button></li>`;
        }

        if (indexPage < totalPages) {
            pagination.innerHTML += `<li class="page-item" id="next-link"><button type="button" class="page-link">Next</button></li>`;
        }

        if (indexPage < totalPages) {
            document.getElementById("next-link").addEventListener("click", function () {
                indexPage = indexPage + 1;
                showPage(indexPage);
                generatePageNumbers();
            });
        }

        if (indexPage > 1) {
            document.getElementById("previous-link").addEventListener("click", function () {
                indexPage = indexPage - 1;
                showPage(indexPage);
                generatePageNumbers();
            });
        }

        // Add click event listener to the page number elements
        document.querySelectorAll(".pagination .page-link").forEach(function (pageLink) {
            const pageNumber = parseInt(pageLink.getAttribute("data-page"));
            if (pageNumber) {
                pageLink.addEventListener("click", function () {
                    indexPage = pageNumber;
                    showPage(indexPage);
                    generatePageNumbers();
                });
            }
            document.getElementById('current-page').textContent = indexPage;
            document.getElementById('total-pages').textContent = totalPages;
        })
    }
</script>

<!-- Add User Modal with Toast and Validation Message -->
<script>
    $(document).ready(function () {
        // Handle form submission using AJAX
        $('#add-user-form').submit(function (event) {
            event.preventDefault(); // Prevent default form submission behavior

            // Send form data using AJAX
            $.ajax({
                url: '@Url.Action("AddUser", "Home")',
                type: 'POST',
                data: $(this).serialize(),
                success: function (result) {
                    if (result.success) {
                        // Update table with new user data
                        $('#user-table').html(result);

                        var toast = new bootstrap.Toast(document.getElementById('liveToast'));
                        var toastMessage = "User successfully added!";
                        document.querySelector('.toast-body').innerHTML = toastMessage;
                        // set background color to green if service/s has been added.
                        toast._element.classList.remove("text-bg-danger");
                        toast._element.classList.add("bg-success");
                        toast.show();

                        setTimeout(function () {
                            toast.dispose();
                        }, 4000);

                        // Hide modal
                        $('#addUsers-modal').modal('dispose');
                        $('#add-user-form')[0].reset();

                        // Clear the validation summary
                        $('#validation-summary').html('');

                    } else {
                        // Check if there is a validation summary
                        if (result.message) {
                            // Display validation summary as a list
                            let validationSummaryList = '<ul class="validation-summary-list">';
                            result.message.forEach(function (error) {
                                validationSummaryList += `<li>${error}</li>`;
                            });
                            validationSummaryList += '</ul>';
                            $('#validation-summary').html(validationSummaryList);
                        } else {
                            // Display error message
                            alert(result.message);
                        }
                    }

                    Synch();
                }
            });
        });
    });

        // Reset form fields when modal is hidden
        $('#addUsers-modal').on('hidden.bs.modal', function () {
            $('#add-user-form')[0].reset();
            $('#validation-summary').html('');
        });

        // Close modal when "Cancel" button is clicked
        $('#cancelButton').on('click', function () {
            $('#addUsers-modal').modal('hide');
        });
</script>

<!-- Edit User Modal with Toast and Validation Message -->
<script>
    $(document).ready(function () {
      // Handle form submission using AJAX
      $('#edit-user-form').submit(function (event) {
        event.preventDefault(); // Prevent default form submission behavior

        // Send form data using AJAX
        $.ajax({
          url: '@Url.Action("UpdateUser", "Home")',
          type: 'POST',
          data: $(this).serialize(),
            success: function (result) {
                if (result.success) {
                    // Update table with new user data
                    $('#user-table').html(result);

                    var toast = new bootstrap.Toast(document.getElementById('liveToast'));
                    var toastMessage = result.message;
                    document.querySelector('.toast-body').innerHTML = toastMessage;
                    // set background color to green if service/s has been added.
                    toast._element.classList.remove("text-bg-danger");
                    toast._element.classList.add("bg-success");
                    toast.show();

                    setTimeout(function () {
                        toast.dispose();
                    }, 4000);

                    // Hide modal
                    $('#editUsers-modal').modal('hide');

                } else {
                    var toast = new bootstrap.Toast(document.getElementById('liveToast'));
                    var toastMessage = result.message;
                    document.querySelector('.toast-body').innerHTML = toastMessage;
                    // set background color to green if service/s has been added.
                    toast._element.classList.remove("text-bg-danger");
                    toast._element.classList.add("bg-success");
                    toast.show();

                    setTimeout(function () {
                        toast.dispose();
                    }, 4000);
                }
                Synch();
            }
        });
      });
    });
</script>

<!-- Edit User Password Modal with Toast and Validation Message -->
<script>
    $(document).ready(function () {
      // Handle form submission using AJAX
      $('#change-pass-form').submit(function (event) {
        event.preventDefault(); // Prevent default form submission behavior

        // Send form data using AJAX
        $.ajax({
          url: '@Url.Action("UpdateUserPassword", "Home")',
          type: 'POST',
          data: $(this).serialize(),
            success: function (result) {
                if (result.success) {
                    // Update table with new user data
                    $('#user-table').html(result);

                    var toast = new bootstrap.Toast(document.getElementById('liveToast'));
                    var toastMessage = result.message;
                    document.querySelector('.toast-body').innerHTML = toastMessage;
                    // set background color to green if service/s has been added.
                    toast._element.classList.remove("text-bg-danger");
                    toast._element.classList.add("bg-success");
                    toast.show();

                    setTimeout(function () {
                        toast.dispose();
                    }, 4000);

                    // Hide modal
                    $('#changePass-modal').modal('hide');

                } else {
                    var toast = new bootstrap.Toast(document.getElementById('liveToast'));
                    var toastMessage = result.message;
                    document.querySelector('.toast-body').innerHTML = toastMessage;
                    // set background color to green if service/s has been added.
                    toast._element.classList.remove("text-bg-danger");
                    toast._element.classList.add("bg-success");
                    toast.show();

                    setTimeout(function () {
                        toast.dispose();
                    }, 4000);
                }
                Synch();
            }
        });
      });
    });
</script>

<script>
    function editPassword(IdUser) {
        // Set the value of the IdUser hidden field in the modal
        $('#IdUser').val(IdUser);
    }
</script>